<<<<<<< HEAD
id: cors-misconfig

info:
  name: CORS Misconfiguration
  author: nadino,g4l1t0,convisoappsec,pdteam,breno_css
  severity: info
  reference:
    - https://portswigger.net/web-security/cors
    - https://www.corben.io/advanced-cors-techniques/
    - https://www.geekboy.ninja/blog/exploiting-misconfigured-cors-cross-origin-resource-sharing/
  tags: cors,generic,misconfig

requests:
  - raw:
      - |
<<<<<<< HEAD
        GET / HTTP/1.1
=======
        GET  HTTP/1.1
>>>>>>> 5d36d276 (add new stuff)
        Host: {{Hostname}}
        Origin: {{cors_origin}}

    payloads:
      cors_origin:
        - "https://{{tolower(rand_base(5))}}{{RDN}}"     # Arbitrary domain
        - "https://{{tolower(rand_base(5))}}.com"             # Arbitrary domain
        - "https://{{FQDN}}.{{tolower(rand_base(5))}}.com"     # Arbitrary domain
        - "https://{{FQDN}}{{tolower(rand_base(5))}}.com"      # Arbitrary domain
        - "https://{{FQDN}}_.{{tolower(rand_base(5))}}.com"    # Arbitrary domain
        - "https://{{FQDN}}%60.{{tolower(rand_base(5))}}.com"  # Arbitrary domain
        - "null"                                              # null origin
        - "https://{{tolower(rand_base(5))}}.{{RDN}}"         # Arbitrary subdomain
        - "http://{{tolower(rand_base(5))}}.{{RDN}}"          # Arbitrary subdomain over http

    stop-at-first-match: true
<<<<<<< HEAD
    matchers-condition: or
=======
>>>>>>> 5d36d276 (add new stuff)
    matchers:
      - type: dsl
        name: arbitrary-origin
        dsl:
          - "contains(tolower(all_headers), 'access-control-allow-origin: {{cors_origin}}')"
          - "contains(tolower(all_headers), 'access-control-allow-credentials: true')"
<<<<<<< HEAD
        condition: and
=======
        condition: and
>>>>>>> 5d36d276 (add new stuff)
=======
id: cors-misconfig

info:
  name: Basic CORS misconfiguration
  author: nadino,G4L1T0,convisoappsec,pdteam
  severity: info
  reference: https://portswigger.net/web-security/cors
  tags: cors,generic

requests:
  - raw:
      - |
        GET / HTTP/1.1
        Host: {{Hostname}}

      - |
        GET / HTTP/1.1
        Host: {{Hostname}}
        Origin: {{randstr}}.tld

      - |
        GET / HTTP/1.1
        Host: {{Hostname}}
        Origin: null

#  TODO's for future as currently {{Hostname}} is not supported in matchers
#        Origin: {{randstr}}.{{Hostname}}
#        Origin: {{Hostname}}.{{randstr}}.tld
#        Origin: {{Hostname}}{{randstr}}.tld
#        Origin: {{Hostname}}_.{{randstr}}.tld
#        Origin: {{Hostname}}%60.{{randstr}}.tld
#        Origin: http://{{Hostname}}
#        Origin: http://{{randstr}}.{{Hostname}}

    matchers-condition: or
    matchers:
      - type: dsl
        name: arbitrary-origin
        dsl:
          - "contains(tolower(all_headers), 'access-control-allow-origin: {{randstr}}.tld')"
          - "contains(tolower(all_headers), 'access-control-allow-credentials: true')"
        condition: and

      - type: dsl
        name: null-origin
        dsl:
          - "contains(tolower(all_headers), 'access-control-allow-origin: null')"
          - "contains(tolower(all_headers), 'access-control-allow-credentials: true')"
        condition: and

      - type: dsl
        name: wildcard-acac
        dsl:
          - "contains(tolower(all_headers), 'access-control-allow-origin: *')"
          - "contains(tolower(all_headers), 'access-control-allow-credentials: true')"
        condition: and

      - type: dsl
        name: wildcard-no-acac
        dsl:
          - "contains(tolower(all_headers), 'access-control-allow-origin: *')"
          - "!contains(tolower(all_headers), 'access-control-allow-credentials: true')"
        condition: and
>>>>>>> 18ddf72b (add new stuff)
