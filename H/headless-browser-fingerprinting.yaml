id: headless-browser-fingerprinting

info:
  name: Client-Side Browser Fingerprinting Detector
  author: geeknik
  severity: medium
  description: |
    Advanced browser fingerprinting detection using Headless Protocol to identify
    techniques used to track users through device characteristics, browser features,
    and behavioral patterns. This template detects Canvas fingerprinting, WebGL
    fingerprinting, AudioContext fingerprinting, device enumeration, screen
    fingerprinting, and other tracking mechanisms while maintaining defensive
    research principles for privacy protection analysis.
  reference:
    - https://pixelprivacy.com/resources/browser-fingerprinting/
    - https://browserleaks.com/
    - https://amiunique.org/
    - https://coveryourtracks.eff.org/
  tags: fingerprinting,privacy,tracking,canvas,webgl,audio,headless,defensive

headless:
  - steps:
      # Navigate to target page
      - action: navigate
        args:
          url: "{{BaseURL}}"

      # Wait for page to fully load
      - action: waitload

      # Initialize browser fingerprinting detection framework
      - action: script
        name: initialize_fingerprinting_detection
        args:
          code: |
            window.fingerprintingResults = {
              canvas_fingerprinting: [],
              webgl_fingerprinting: [],
              audio_fingerprinting: [],
              device_fingerprinting: [],
              screen_fingerprinting: [],
              font_fingerprinting: [],
              timezone_fingerprinting: [],
              webrtc_fingerprinting: [],
              battery_fingerprinting: [],
              behavioral_tracking: [],
              detected_techniques: [],
              risk_assessment: {},
              test_results: []
            };

            // Hook Canvas API for fingerprinting detection
            var originalGetContext = HTMLCanvasElement.prototype.getContext;
            HTMLCanvasElement.prototype.getContext = function(type) {
              window.fingerprintingResults.test_results.push('canvas_getContext_called: ' + type);

              if (type === '2d' || type === 'webgl' || type === 'webgl2') {
                window.fingerprintingResults.canvas_fingerprinting.push({
                  type: 'canvas_context_request',
                  context_type: type,
                  timestamp: Date.now(),
                  detected: true
                });
              }

              return originalGetContext.call(this, type);
            };

            // Hook Canvas toDataURL for fingerprinting detection
            var originalToDataURL = HTMLCanvasElement.prototype.toDataURL;
            HTMLCanvasElement.prototype.toDataURL = function() {
              window.fingerprintingResults.canvas_fingerprinting.push({
                type: 'canvas_data_extraction',
                method: 'toDataURL',
                timestamp: Date.now(),
                detected: true,
                severity: 'high'
              });

              window.fingerprintingResults.test_results.push('canvas_toDataURL_called');
              return originalToDataURL.apply(this, arguments);
            };

            // Hook Canvas getImageData for fingerprinting detection
            var originalGetImageData = CanvasRenderingContext2D.prototype.getImageData;
            CanvasRenderingContext2D.prototype.getImageData = function() {
              window.fingerprintingResults.canvas_fingerprinting.push({
                type: 'canvas_data_extraction',
                method: 'getImageData',
                timestamp: Date.now(),
                detected: true,
                severity: 'high'
              });

              window.fingerprintingResults.test_results.push('canvas_getImageData_called');
              return originalGetImageData.apply(this, arguments);
            };

            // Hook WebGL parameter extraction
            if (typeof WebGLRenderingContext !== 'undefined') {
              var originalGetParameter = WebGLRenderingContext.prototype.getParameter;
              WebGLRenderingContext.prototype.getParameter = function(pname) {
                window.fingerprintingResults.webgl_fingerprinting.push({
                  type: 'webgl_parameter_request',
                  parameter: pname,
                  timestamp: Date.now(),
                  detected: true
                });

                window.fingerprintingResults.test_results.push('webgl_getParameter_called: ' + pname);
                return originalGetParameter.call(this, pname);
              };
            }

            // Hook AudioContext for audio fingerprinting detection
            if (typeof AudioContext !== 'undefined' || typeof webkitAudioContext !== 'undefined') {
              var OriginalAudioContext = window.AudioContext || window.webkitAudioContext;
              window.AudioContext = window.webkitAudioContext = function() {
                window.fingerprintingResults.audio_fingerprinting.push({
                  type: 'audio_context_creation',
                  timestamp: Date.now(),
                  detected: true,
                  severity: 'medium'
                });

                window.fingerprintingResults.test_results.push('AudioContext_created');
                return new OriginalAudioContext();
              };
            }

            // Hook navigator properties access
            var navigatorProps = ['userAgent', 'platform', 'languages', 'hardwareConcurrency', 'deviceMemory'];
            for (var i = 0; i < navigatorProps.length; i++) {
              var prop = navigatorProps[i];
              if (navigator[prop] !== undefined) {
                try {
                  Object.defineProperty(navigator, prop, {
                    get: function(propName) {
                      return function() {
                        window.fingerprintingResults.device_fingerprinting.push({
                          type: 'navigator_property_access',
                          property: propName,
                          timestamp: Date.now(),
                          detected: true
                        });

                        window.fingerprintingResults.test_results.push('navigator_' + propName + '_accessed');
                        return navigator[propName];
                      };
                    }(prop),
                    configurable: true
                  });
                } catch (e) {
                  // Some properties might not be configurable
                  window.fingerprintingResults.test_results.push('navigator_' + prop + '_hook_failed: ' + e.message);
                }
              }
            }

            // Hook screen properties access
            var screenProps = ['width', 'height', 'colorDepth', 'pixelDepth'];
            for (var j = 0; j < screenProps.length; j++) {
              var screenProp = screenProps[j];
              try {
                Object.defineProperty(screen, screenProp, {
                  get: function(propName) {
                    return function() {
                      window.fingerprintingResults.screen_fingerprinting.push({
                        type: 'screen_property_access',
                        property: propName,
                        timestamp: Date.now(),
                        detected: true
                      });

                      window.fingerprintingResults.test_results.push('screen_' + propName + '_accessed');
                      return screen[propName];
                    };
                  }(screenProp),
                  configurable: true
                });
              } catch (e) {
                window.fingerprintingResults.test_results.push('screen_' + screenProp + '_hook_failed: ' + e.message);
              }
            }

            return window.fingerprintingResults;

      # Test for font fingerprinting techniques
      - action: script
        name: detect_font_fingerprinting
        args:
          code: |
            window.fingerprintingResults.test_results.push('font_fingerprinting_detection');

            try {
              // Look for font detection scripts
              var scripts = document.getElementsByTagName('script');
              for (var i = 0; i < scripts.length; i++) {
                var script = scripts[i];
                if (script.textContent) {
                  var content = script.textContent;

                  // Check for common font fingerprinting patterns
                  var fontPatterns = [
                    /document\.fonts/gi,
                    /FontFace/gi,
                    /measureText/gi,
                    /getComputedStyle.*font/gi,
                    /font.*family.*serif/gi
                  ];

                  for (var j = 0; j < fontPatterns.length; j++) {
                    var pattern = fontPatterns[j];
                    if (pattern.test(content)) {
                      window.fingerprintingResults.font_fingerprinting.push({
                        type: 'font_detection_script',
                        pattern: pattern.toString(),
                        script_index: i,
                        detected: true,
                        severity: 'medium'
                      });
                    }
                  }
                }
              }

              // Test for canvas font measurement technique
              var canvas = document.createElement('canvas');
              var ctx = canvas.getContext('2d');
              if (ctx) {
                var testText = 'Fingerprinting Test';
                var fonts = ['Arial', 'Verdana', 'Times New Roman', 'Courier New'];

                for (var k = 0; k < fonts.length; k++) {
                  var font = fonts[k];
                  ctx.font = '14px ' + font;
                  var metrics = ctx.measureText(testText);

                  if (metrics.width) {
                    window.fingerprintingResults.font_fingerprinting.push({
                      type: 'canvas_font_measurement',
                      font: font,
                      width: metrics.width,
                      detected: true,
                      severity: 'low'
                    });
                  }
                }
              }

            } catch (e) {
              window.fingerprintingResults.test_results.push('font_fingerprinting_error: ' + e.message);
            }

            return window.fingerprintingResults;

      # Test for timezone and locale fingerprinting
      - action: script
        name: detect_timezone_fingerprinting
        args:
          code: |
            window.fingerprintingResults.test_results.push('timezone_fingerprinting_detection');

            try {
              // Check for timezone detection attempts
              var timezoneTests = [
                function() {
                  return new Date().getTimezoneOffset();
                },
                function() {
                  return Intl.DateTimeFormat().resolvedOptions().timeZone;
                },
                function() {
                  return new Date().toString();
                }
              ];

              for (var i = 0; i < timezoneTests.length; i++) {
                try {
                  var result = timezoneTests[i]();
                  window.fingerprintingResults.timezone_fingerprinting.push({
                    type: 'timezone_detection',
                    method: i === 0 ? 'getTimezoneOffset' :
                            i === 1 ? 'Intl.DateTimeFormat' : 'Date.toString',
                    result: result,
                    detected: true,
                    severity: 'low'
                  });
                } catch (e) {
                  window.fingerprintingResults.test_results.push('timezone_test_' + i + '_error: ' + e.message);
                }
              }

              // Check for locale fingerprinting
              if (typeof navigator.languages !== 'undefined') {
                window.fingerprintingResults.timezone_fingerprinting.push({
                  type: 'language_detection',
                  languages: navigator.languages,
                  detected: true,
                  severity: 'low'
                });
              }

            } catch (e) {
              window.fingerprintingResults.test_results.push('timezone_fingerprinting_error: ' + e.message);
            }

            return window.fingerprintingResults;

      # Test for WebRTC fingerprinting
      - action: script
        name: detect_webrtc_fingerprinting
        args:
          code: |
            window.fingerprintingResults.test_results.push('webrtc_fingerprinting_detection');

            try {
              // Check if WebRTC is being used for fingerprinting
              if (typeof RTCPeerConnection !== 'undefined' ||
                  typeof webkitRTCPeerConnection !== 'undefined' ||
                  typeof mozRTCPeerConnection !== 'undefined') {

                window.fingerprintingResults.webrtc_fingerprinting.push({
                  type: 'webrtc_available',
                  detected: true,
                  severity: 'medium'
                });

                // Hook RTCPeerConnection creation
                var OriginalRTCPeerConnection = window.RTCPeerConnection ||
                                               window.webkitRTCPeerConnection ||
                                               window.mozRTCPeerConnection;

                if (OriginalRTCPeerConnection) {
                  window.RTCPeerConnection = window.webkitRTCPeerConnection = window.mozRTCPeerConnection = function() {
                    window.fingerprintingResults.webrtc_fingerprinting.push({
                      type: 'webrtc_connection_attempt',
                      timestamp: Date.now(),
                      detected: true,
                      severity: 'high'
                    });

                    return new OriginalRTCPeerConnection(arguments[0]);
                  };
                }
              }

              // Check for media device enumeration
              if (navigator.mediaDevices && navigator.mediaDevices.enumerateDevices) {
                navigator.mediaDevices.enumerateDevices().then(function(devices) {
                  window.fingerprintingResults.webrtc_fingerprinting.push({
                    type: 'media_device_enumeration',
                    device_count: devices.length,
                    detected: true,
                    severity: 'high'
                  });
                }).catch(function(e) {
                  window.fingerprintingResults.test_results.push('media_enumeration_error: ' + e.message);
                });
              }

            } catch (e) {
              window.fingerprintingResults.test_results.push('webrtc_fingerprinting_error: ' + e.message);
            }

            return window.fingerprintingResults;

      # Test for battery fingerprinting
      - action: script
        name: detect_battery_fingerprinting
        args:
          code: |
            window.fingerprintingResults.test_results.push('battery_fingerprinting_detection');

            try {
              // Check for battery API usage (deprecated but still detectable)
              if (navigator.battery || navigator.getBattery) {
                window.fingerprintingResults.battery_fingerprinting.push({
                  type: 'battery_api_access',
                  detected: true,
                  severity: 'medium'
                });

                if (navigator.getBattery) {
                  navigator.getBattery().then(function(battery) {
                    window.fingerprintingResults.battery_fingerprinting.push({
                      type: 'battery_info_access',
                      level: battery.level,
                      charging: battery.charging,
                      detected: true,
                      severity: 'high'
                    });
                  }).catch(function(e) {
                    window.fingerprintingResults.test_results.push('battery_access_error: ' + e.message);
                  });
                }
              }

            } catch (e) {
              window.fingerprintingResults.test_results.push('battery_fingerprinting_error: ' + e.message);
            }

            return window.fingerprintingResults;

      # Detect behavioral tracking patterns
      - action: script
        name: detect_behavioral_tracking
        args:
          code: |
            window.fingerprintingResults.test_results.push('behavioral_tracking_detection');

            try {
              // Hook mouse movement tracking
              var originalAddEventListener = EventTarget.prototype.addEventListener;
              EventTarget.prototype.addEventListener = function(type, listener, options) {
                if (type === 'mousemove' || type === 'mousedown' || type === 'mouseup' ||
                    type === 'click' || type === 'keydown' || type === 'keyup') {
                  window.fingerprintingResults.behavioral_tracking.push({
                    type: 'event_listener_registration',
                    event_type: type,
                    timestamp: Date.now(),
                    detected: true,
                    severity: 'low'
                  });
                }
                return originalAddEventListener.call(this, type, listener, options);
              };

              // Check for timing-based fingerprinting
              var performanceAPIs = ['performance.now', 'Date.now', 'performance.timing'];
              for (var i = 0; i < performanceAPIs.length; i++) {
                var api = performanceAPIs[i];
                if (eval('typeof ' + api) !== 'undefined') {
                  window.fingerprintingResults.behavioral_tracking.push({
                    type: 'timing_api_available',
                    api: api,
                    detected: true,
                    severity: 'low'
                  });
                }
              }

            } catch (e) {
              window.fingerprintingResults.test_results.push('behavioral_tracking_error: ' + e.message);
            }

            return window.fingerprintingResults;

      # Final fingerprinting assessment
      - action: script
        name: final_fingerprinting_assessment
        args:
          code: |
            // Calculate comprehensive fingerprinting risk score
            var riskScore = 0;
            var detectedTechniques = [];

            // Count fingerprinting techniques
            var categories = [
              'canvas_fingerprinting',
              'webgl_fingerprinting',
              'audio_fingerprinting',
              'device_fingerprinting',
              'screen_fingerprinting',
              'font_fingerprinting',
              'timezone_fingerprinting',
              'webrtc_fingerprinting',
              'battery_fingerprinting',
              'behavioral_tracking'
            ];

            var totalDetections = 0;
            for (var i = 0; i < categories.length; i++) {
              var category = categories[i];
              var detections = window.fingerprintingResults[category];
              if (detections && detections.length > 0) {
                detectedTechniques.push(category);
                totalDetections += detections.length;

                // Calculate risk based on severity
                for (var j = 0; j < detections.length; j++) {
                  var detection = detections[j];
                  switch (detection.severity) {
                    case 'high': riskScore += 20; break;
                    case 'medium': riskScore += 10; break;
                    case 'low': riskScore += 5; break;
                    default: riskScore += 5; break;
                  }
                }
              }
            }

            window.fingerprintingResults.detected_techniques = detectedTechniques;

            window.fingerprintingResults.risk_assessment = {
              total_detections: totalDetections,
              techniques_detected: detectedTechniques.length,
              risk_score: Math.min(riskScore, 100),
              risk_level: riskScore > 80 ? 'Critical' :
                         riskScore > 60 ? 'High' :
                         riskScore > 40 ? 'Medium' : 'Low',
              privacy_impact: riskScore > 60 ? 'Severe' :
                             riskScore > 40 ? 'High' :
                             riskScore > 20 ? 'Medium' : 'Low',
              test_coverage: window.fingerprintingResults.test_results.length
            };

            window.fingerprintingResults.summary = {
              scan_completed: true,
              timestamp: new Date().toISOString(),
              fingerprinting_detected: detectedTechniques.length > 0,
              high_risk_techniques: riskScore > 60,
              canvas_fingerprinting_detected: window.fingerprintingResults.canvas_fingerprinting.length > 0,
              webgl_fingerprinting_detected: window.fingerprintingResults.webgl_fingerprinting.length > 0,
              audio_fingerprinting_detected: window.fingerprintingResults.audio_fingerprinting.length > 0,
              comprehensive_testing_completed: true
            };

            return window.fingerprintingResults;

    extractors:
      - type: regex
        name: fingerprinting_summary
        part: body
        regex:
          - '"scan_completed":\s*true'

      - type: regex
        name: confirmed_fingerprinting
        part: body
        regex:
          - '"fingerprinting_detected":\s*true'

    matchers:
      - type: regex
        name: fingerprinting_detected
        regex:
          - '"fingerprinting_detected":\s*true'

      - type: regex
        name: high_risk_fingerprinting
        regex:
          - '"risk_level":\s*"(Critical|High)"'

      - type: regex
        name: canvas_fingerprinting
        regex:
          - '"canvas_fingerprinting_detected":\s*true'

# Headless template for comprehensive browser fingerprinting detection