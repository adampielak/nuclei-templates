id: headless-clickjacking

info:
  name: Advanced Clickjacking Detection Scanner
  author: geeknik
  severity: medium
  description: |
    Advanced clickjacking vulnerability detection using Headless Protocol for
    comprehensive frame security analysis. This template performs frame embedding
    tests, X-Frame-Options validation, Content Security Policy analysis, transparent
    overlay detection, and iframe sandboxing assessment while maintaining defensive
    research principles for UI redressing attack vector identification.
  reference:
    - https://owasp.org/www-community/attacks/Clickjacking
    - https://portswigger.net/web-security/clickjacking
    - https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options
    - https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy/frame-ancestors
  tags: clickjacking,frame,iframe,ui-redressing,x-frame-options,csp,headless,defensive

headless:
  - steps:
      # Navigate to target page
      - action: navigate
        args:
          url: "{{BaseURL}}"

      # Wait for page to fully load
      - action: waitload

      # Initialize clickjacking detection framework
      - action: script
        name: initialize_clickjacking_detection
        args:
          code: |
            window.clickjackingResults = {
              frame_security: {
                x_frame_options: null,
                csp_frame_ancestors: null,
                frame_busting_scripts: [],
                vulnerable_to_framing: false
              },
              iframe_tests: [],
              overlay_detection: [],
              interaction_hijacking: [],
              frame_navigation: [],
              security_headers: {},
              vulnerabilities: [],
              test_results: [],
              risk_assessment: {}
            };

            // Analyze response headers for frame security
            window.clickjackingResults.test_results.push('analyzing_frame_security_headers');

            // Check if page is already framed
            var isFramed = window.self !== window.top;
            window.clickjackingResults.frame_security.currently_framed = isFramed;

            if (isFramed) {
              window.clickjackingResults.vulnerabilities.push({
                type: 'page_successfully_framed',
                severity: 'high',
                description: 'Page is currently loaded within a frame',
                confirmed: true
              });
            }

            // Hook frame-related JavaScript APIs
            var originalCreateElement = document.createElement;
            document.createElement = function(tagName) {
              if (tagName && tagName.toLowerCase() === 'iframe') {
                window.clickjackingResults.iframe_tests.push({
                  type: 'iframe_creation_attempt',
                  timestamp: Date.now(),
                  stack: new Error().stack
                });
              }
              return originalCreateElement.call(this, tagName);
            };

            // Detect frame-busting scripts
            var scripts = document.getElementsByTagName('script');
            for (var i = 0; i < scripts.length; i++) {
              var script = scripts[i];
              if (script.textContent) {
                var content = script.textContent;

                // Common frame-busting patterns
                var frameBustingPatterns = [
                  /if\s*\(\s*top\s*[!=]=\s*self\s*\)/gi,
                  /if\s*\(\s*self\s*[!=]=\s*top\s*\)/gi,
                  /if\s*\(\s*window\s*[!=]=\s*parent\s*\)/gi,
                  /if\s*\(\s*parent\s*[!=]=\s*window\s*\)/gi,
                  /top\.location\s*=\s*self\.location/gi,
                  /top\.location\s*=\s*window\.location/gi,
                  /window\.top\.location/gi,
                  /parent\.location/gi
                ];

                for (var j = 0; j < frameBustingPatterns.length; j++) {
                  var pattern = frameBustingPatterns[j];
                  if (pattern.test(content)) {
                    window.clickjackingResults.frame_security.frame_busting_scripts.push({
                      pattern: pattern.toString(),
                      script_index: i,
                      detected: true
                    });
                  }
                }
              }
            }

            return window.clickjackingResults;

      # Test iframe embedding capability
      - action: script
        name: test_iframe_embedding
        args:
          code: |
            window.clickjackingResults.test_results.push('testing_iframe_embedding');

            try {
              // Create test iframe
              var testIframe = document.createElement('iframe');
              testIframe.style.width = '100px';
              testIframe.style.height = '100px';
              testIframe.style.position = 'absolute';
              testIframe.style.top = '-1000px';
              testIframe.style.left = '-1000px';
              testIframe.src = window.location.href;

              // Track iframe loading
              var iframeLoaded = false;
              var iframeError = false;

              testIframe.onload = function() {
                iframeLoaded = true;
                window.clickjackingResults.iframe_tests.push({
                  type: 'iframe_load_success',
                  url: window.location.href,
                  timestamp: Date.now(),
                  vulnerable: true
                });

                // Check if iframe content is accessible
                try {
                  var iframeDoc = testIframe.contentDocument || testIframe.contentWindow.document;
                  if (iframeDoc) {
                    window.clickjackingResults.iframe_tests.push({
                      type: 'iframe_content_accessible',
                      vulnerable: true,
                      severity: 'high'
                    });
                  }
                } catch (e) {
                  window.clickjackingResults.iframe_tests.push({
                    type: 'iframe_content_blocked',
                    error: e.message,
                    security_mechanism: 'same_origin_policy'
                  });
                }
              };

              testIframe.onerror = function() {
                iframeError = true;
                window.clickjackingResults.iframe_tests.push({
                  type: 'iframe_load_error',
                  url: window.location.href,
                  timestamp: Date.now(),
                  protected: true
                });
              };

              // Add iframe to document
              document.body.appendChild(testIframe);

              // Check loading status after timeout
              setTimeout(function() {
                if (!iframeLoaded && !iframeError) {
                  window.clickjackingResults.iframe_tests.push({
                    type: 'iframe_load_timeout',
                    url: window.location.href,
                    possible_protection: true
                  });
                }

                // Clean up test iframe
                try {
                  document.body.removeChild(testIframe);
                } catch (e) {
                  // Iframe might already be removed
                }
              }, 3000);

            } catch (e) {
              window.clickjackingResults.test_results.push('iframe_embedding_test_error: ' + e.message);
            }

            return window.clickjackingResults;

      # Test transparent overlay detection
      - action: script
        name: detect_transparent_overlays
        args:
          code: |
            window.clickjackingResults.test_results.push('detecting_transparent_overlays');

            try {
              // Create transparent overlay for testing
              var overlay = document.createElement('div');
              overlay.style.position = 'fixed';
              overlay.style.top = '0';
              overlay.style.left = '0';
              overlay.style.width = '100%';
              overlay.style.height = '100%';
              overlay.style.backgroundColor = 'rgba(255, 0, 0, 0.1)';
              overlay.style.zIndex = '999999';
              overlay.style.pointerEvents = 'auto';
              overlay.id = 'clickjacking-test-overlay';

              document.body.appendChild(overlay);

              // Test if overlay intercepts clicks
              var clickIntercepted = false;
              overlay.onclick = function() {
                clickIntercepted = true;
                window.clickjackingResults.overlay_detection.push({
                  type: 'transparent_overlay_click_interception',
                  detected: true,
                  severity: 'high'
                });
              };

              // Simulate click on overlay
              var clickEvent = new MouseEvent('click', {
                bubbles: true,
                cancelable: true,
                view: window
              });
              overlay.dispatchEvent(clickEvent);

              // Check for existing suspicious overlays
              var allElements = document.querySelectorAll('*');
              var suspiciousOverlays = 0;

              for (var i = 0; i < allElements.length; i++) {
                var element = allElements[i];
                var styles = window.getComputedStyle(element);

                // Check for potentially malicious overlay characteristics
                if (styles.position === 'fixed' || styles.position === 'absolute') {
                  var opacity = parseFloat(styles.opacity);
                  var zIndex = parseInt(styles.zIndex);

                  if ((opacity < 0.1 || styles.visibility === 'hidden') &&
                      zIndex > 1000 &&
                      (styles.width === '100%' || parseInt(styles.width) > 500) &&
                      (styles.height === '100%' || parseInt(styles.height) > 500)) {

                    suspiciousOverlays++;
                    window.clickjackingResults.overlay_detection.push({
                      type: 'suspicious_transparent_overlay',
                      element: element.tagName + (element.id ? '#' + element.id : '') +
                              (element.className ? '.' + element.className : ''),
                      opacity: opacity,
                      zIndex: zIndex,
                      width: styles.width,
                      height: styles.height,
                      severity: 'medium'
                    });
                  }
                }
              }

              // Clean up test overlay
              setTimeout(function() {
                try {
                  document.body.removeChild(overlay);
                } catch (e) {
                  // Overlay might already be removed
                }
              }, 1000);

            } catch (e) {
              window.clickjackingResults.test_results.push('transparent_overlay_detection_error: ' + e.message);
            }

            return window.clickjackingResults;

      # Test interaction hijacking potential
      - action: script
        name: test_interaction_hijacking
        args:
          code: |
            window.clickjackingResults.test_results.push('testing_interaction_hijacking');

            try {
              // Hook click events to detect potential hijacking
              var originalAddEventListener = EventTarget.prototype.addEventListener;
              var clickListenerCount = 0;

              EventTarget.prototype.addEventListener = function(type, listener, options) {
                if (type === 'click') {
                  clickListenerCount++;
                  window.clickjackingResults.interaction_hijacking.push({
                    type: 'click_listener_registration',
                    element: this.tagName || 'unknown',
                    count: clickListenerCount
                  });
                }
                return originalAddEventListener.call(this, type, listener, options);
              };

              // Test for elements with suspicious positioning
              var clickableElements = document.querySelectorAll('button, input[type="submit"], a, [onclick]');
              for (var i = 0; i < clickableElements.length; i++) {
                var element = clickableElements[i];
                var rect = element.getBoundingClientRect();
                var styles = window.getComputedStyle(element);

                // Check for elements that might be overlaid
                if (rect.width > 0 && rect.height > 0) {
                  var elementAtPoint = document.elementFromPoint(
                    rect.left + rect.width / 2,
                    rect.top + rect.height / 2
                  );

                  if (elementAtPoint && elementAtPoint !== element) {
                    window.clickjackingResults.interaction_hijacking.push({
                      type: 'element_overlay_detected',
                      target_element: element.tagName + (element.id ? '#' + element.id : ''),
                      overlaying_element: elementAtPoint.tagName + (elementAtPoint.id ? '#' + elementAtPoint.id : ''),
                      severity: 'high'
                    });
                  }
                }
              }

              // Test for cursor style manipulation
              var elementsWithCursorPointer = document.querySelectorAll('[style*="cursor"]');
              for (var j = 0; j < elementsWithCursorPointer.length; j++) {
                var cursorElement = elementsWithCursorPointer[j];
                var cursorStyles = window.getComputedStyle(cursorElement);

                if (cursorStyles.cursor === 'pointer' &&
                    (cursorStyles.opacity === '0' || cursorStyles.visibility === 'hidden')) {
                  window.clickjackingResults.interaction_hijacking.push({
                    type: 'hidden_clickable_element',
                    element: cursorElement.tagName + (cursorElement.id ? '#' + cursorElement.id : ''),
                    cursor: cursorStyles.cursor,
                    opacity: cursorStyles.opacity,
                    visibility: cursorStyles.visibility,
                    severity: 'high'
                  });
                }
              }

            } catch (e) {
              window.clickjackingResults.test_results.push('interaction_hijacking_test_error: ' + e.message);
            }

            return window.clickjackingResults;

      # Test frame navigation and busting bypass
      - action: script
        name: test_frame_navigation
        args:
          code: |
            window.clickjackingResults.test_results.push('testing_frame_navigation');

            try {
              // Test various frame navigation methods
              var navigationMethods = [
                {
                  name: 'top_location_href',
                  test: function() {
                    try {
                      return typeof window.top.location.href === 'string';
                    } catch (e) {
                      return false;
                    }
                  }
                },
                {
                  name: 'parent_location_href',
                  test: function() {
                    try {
                      return typeof window.parent.location.href === 'string';
                    } catch (e) {
                      return false;
                    }
                  }
                },
                {
                  name: 'top_location_replace',
                  test: function() {
                    try {
                      return typeof window.top.location.replace === 'function';
                    } catch (e) {
                      return false;
                    }
                  }
                }
              ];

              for (var i = 0; i < navigationMethods.length; i++) {
                var method = navigationMethods[i];
                var accessible = method.test();

                window.clickjackingResults.frame_navigation.push({
                  method: method.name,
                  accessible: accessible,
                  security_risk: accessible ? 'high' : 'low'
                });

                if (accessible) {
                  window.clickjackingResults.vulnerabilities.push({
                    type: 'frame_navigation_accessible',
                    method: method.name,
                    severity: 'medium',
                    description: 'Frame navigation method is accessible, indicating weak frame busting',
                    confirmed: true
                  });
                }
              }

              // Test for double-framing vulnerability
              try {
                if (window.top !== window.self && window.parent !== window.self) {
                  window.clickjackingResults.vulnerabilities.push({
                    type: 'double_framing_detected',
                    severity: 'high',
                    description: 'Page is double-framed, frame busting may be bypassable',
                    confirmed: true
                  });
                }
              } catch (e) {
                window.clickjackingResults.test_results.push('double_framing_test_error: ' + e.message);
              }

            } catch (e) {
              window.clickjackingResults.test_results.push('frame_navigation_test_error: ' + e.message);
            }

            return window.clickjackingResults;

      # Final clickjacking assessment
      - action: script
        name: final_clickjacking_assessment
        args:
          code: |
            // Calculate comprehensive clickjacking risk score
            var riskScore = 0;
            var vulnerabilities = window.clickjackingResults.vulnerabilities;

            // Score vulnerabilities
            for (var i = 0; i < vulnerabilities.length; i++) {
              var vuln = vulnerabilities[i];
              switch (vuln.severity) {
                case 'critical': riskScore += 35; break;
                case 'high': riskScore += 25; break;
                case 'medium': riskScore += 15; break;
                case 'low': riskScore += 5; break;
              }
            }

            // Additional risk factors
            var frameBustingScripts = window.clickjackingResults.frame_security.frame_busting_scripts.length;
            var iframeTests = window.clickjackingResults.iframe_tests.length;
            var overlayDetections = window.clickjackingResults.overlay_detection.length;
            var interactionHijacking = window.clickjackingResults.interaction_hijacking.length;

            // Adjust score based on protection mechanisms
            if (frameBustingScripts > 0) {
              riskScore -= 10; // Frame busting provides some protection
            }

            // Check if successfully framed
            var successfullyFramed = false;
            for (var j = 0; j < window.clickjackingResults.iframe_tests.length; j++) {
              if (window.clickjackingResults.iframe_tests[j].type === 'iframe_load_success') {
                successfullyFramed = true;
                riskScore += 20;
                break;
              }
            }

            window.clickjackingResults.risk_assessment = {
              total_vulnerabilities: vulnerabilities.length,
              successfully_framed: successfullyFramed,
              frame_busting_scripts: frameBustingScripts,
              overlay_detections: overlayDetections,
              interaction_hijacking_risks: interactionHijacking,
              risk_score: Math.min(riskScore, 100),
              risk_level: riskScore > 70 ? 'Critical' :
                         riskScore > 50 ? 'High' :
                         riskScore > 30 ? 'Medium' : 'Low',
              test_coverage: window.clickjackingResults.test_results.length,
              recommendations: []
            };

            // Generate recommendations
            if (successfullyFramed) {
              window.clickjackingResults.risk_assessment.recommendations.push(
                'Implement X-Frame-Options: DENY or SAMEORIGIN header',
                'Add Content-Security-Policy frame-ancestors directive',
                'Consider implementing frame-busting JavaScript as defense in depth'
              );
            }

            if (overlayDetections > 0) {
              window.clickjackingResults.risk_assessment.recommendations.push(
                'Review transparent overlay elements for malicious intent',
                'Implement click-through protection mechanisms'
              );
            }

            if (interactionHijacking > 0) {
              window.clickjackingResults.risk_assessment.recommendations.push(
                'Audit element positioning and click event handlers',
                'Implement interaction confirmation for sensitive actions'
              );
            }

            window.clickjackingResults.summary = {
              scan_completed: true,
              timestamp: new Date().toISOString(),
              clickjacking_vulnerable: successfullyFramed || riskScore > 30,
              frame_embedding_possible: successfullyFramed,
              overlay_attacks_detected: overlayDetections > 0,
              interaction_hijacking_possible: interactionHijacking > 0,
              comprehensive_testing_completed: true
            };

            return window.clickjackingResults;

    extractors:
      - type: regex
        name: clickjacking_summary
        part: body
        regex:
          - '"scan_completed":\s*true'

      - type: regex
        name: confirmed_clickjacking
        part: body
        regex:
          - '"clickjacking_vulnerable":\s*true'

    matchers:
      - type: regex
        name: clickjacking_detected
        regex:
          - '"clickjacking_vulnerable":\s*true'

      - type: regex
        name: high_risk_clickjacking
        regex:
          - '"risk_level":\s*"(Critical|High)"'

      - type: regex
        name: frame_embedding_possible
        regex:
          - '"frame_embedding_possible":\s*true'

# Headless template for comprehensive clickjacking vulnerability detection