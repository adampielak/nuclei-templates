id: headless-js-framework-vuln

info:
  name: JavaScript Framework Vulnerability Scanner
  author: geeknik
  severity: high
  description: |
    Comprehensive JavaScript framework vulnerability scanner using Headless Protocol
    for detecting known security issues in popular JavaScript frameworks and libraries.
    This template performs version detection, CVE mapping, configuration analysis,
    and runtime vulnerability testing across React, Angular, Vue.js, jQuery, Lodash,
    Axios, and other common frameworks while maintaining defensive research principles.
  reference:
    - https://snyk.io/vuln/
    - https://nvd.nist.gov/vuln/search
    - https://github.com/RetireJS/retire.js
  tags: javascript,frameworks,vulnerabilities,cve,headless,defensive

headless:
  - steps:
      # Navigate to target page
      - action: navigate
        args:
          url: "{{BaseURL}}"

      # Wait for page to fully load
      - action: waitload

      # Initialize framework vulnerability scanner
      - action: script
        name: initialize_framework_scanner
        args:
          code: |
            window.frameworkVulnResults = {
              detected_frameworks: {},
              vulnerabilities: [],
              version_analysis: {},
              configuration_issues: [],
              test_results: [],
              risk_assessment: {}
            };

            // Framework detection with version extraction
            const frameworks = {
              jquery: {
                detection: () => typeof $ !== 'undefined' && $.fn && $.fn.jquery,
                version: () => $.fn.jquery,
                global_var: '$',
                vulnerable_versions: {
                  '1.0.0-1.6.4': ['CVE-2011-4969 (XSS via location.hash)'],
                  '1.0.0-1.8.3': ['CVE-2012-6708 (Selector interpretation)'],
                  '1.0.0-2.1.4': ['CVE-2015-9251 (XSS via HTML strings)'],
                  '1.0.0-2.2.4': ['CVE-2016-10707 (XSS in jQuery.extend)'],
                  '3.0.0-3.4.1': ['CVE-2019-11358 (Prototype pollution)'],
                  '3.0.0-3.5.0': ['CVE-2020-11022 (XSS in jQuery.htmlPrefilter)'],
                  '3.0.0-3.5.1': ['CVE-2020-11023 (XSS via HTML containing elements)']
                }
              },
              angular: {
                detection: () => typeof angular !== 'undefined',
                version: () => angular.version ? angular.version.full : null,
                global_var: 'angular',
                vulnerable_versions: {
                  '1.0.0-1.2.32': ['CVE-2017-1000451 (Angular Expression injection)'],
                  '1.0.0-1.5.11': ['CVE-2016-10744 (Open redirect via $sanitize)'],
                  '1.0.0-1.6.9': ['CVE-2018-6341 (ReDoS in $sanitize)'],
                  '1.0.0-1.7.8': ['CVE-2019-10768 (Prototype pollution)']
                }
              },
              react: {
                detection: () => typeof React !== 'undefined',
                version: () => React.version,
                global_var: 'React',
                vulnerable_versions: {
                  '0.0.0-16.0.1': ['CVE-2018-6341 (XSS via user-supplied attribute names)'],
                  '16.0.0-16.13.1': ['CVE-2019-16769 (XSS in SSR via href)'],
                  '0.0.0-16.13.1': ['CVE-2020-15168 (XSS in react-dom)']
                }
              },
              vue: {
                detection: () => typeof Vue !== 'undefined',
                version: () => Vue.version,
                global_var: 'Vue',
                vulnerable_versions: {
                  '2.0.0-2.6.11': ['CVE-2019-20149 (XSS via template compilation)'],
                  '2.0.0-2.6.12': ['CVE-2020-15168 (Template injection)']
                }
              },
              lodash: {
                detection: () => typeof _ !== 'undefined' && _.VERSION,
                version: () => _.VERSION,
                global_var: '_',
                vulnerable_versions: {
                  '1.0.0-4.17.11': ['CVE-2018-16487 (Prototype pollution)'],
                  '1.0.0-4.17.15': ['CVE-2019-1010266 (ReDoS in trim functions)'],
                  '1.0.0-4.17.19': ['CVE-2020-8203 (Prototype pollution in zipObjectDeep)']
                }
              },
              axios: {
                detection: () => typeof axios !== 'undefined',
                version: () => axios.VERSION || (axios.defaults && axios.defaults.adapter && 'detected'),
                global_var: 'axios',
                vulnerable_versions: {
                  '0.0.0-0.18.1': ['CVE-2019-10742 (SSRF via redirect)'],
                  '0.0.0-0.21.1': ['CVE-2020-28168 (Request forgery via redirect)']
                }
              },
              moment: {
                detection: () => typeof moment !== 'undefined',
                version: () => moment.version,
                global_var: 'moment',
                vulnerable_versions: {
                  '2.0.0-2.19.2': ['CVE-2017-18214 (ReDoS in RFC 2822 parsing)'],
                  '2.0.0-2.29.1': ['CVE-2022-24785 (Path traversal in moment.locale)']
                }
              },
              bootstrap: {
                detection: () => typeof bootstrap !== 'undefined' ||
                           document.querySelector('.bootstrap, [class*="bootstrap"]') !== null,
                version: () => {
                  if (typeof bootstrap !== 'undefined' && bootstrap.Tooltip) {
                    return bootstrap.Tooltip.VERSION;
                  }
                  return 'detected';
                },
                global_var: 'bootstrap',
                vulnerable_versions: {
                  '3.0.0-3.4.1': ['CVE-2016-10735 (XSS in data-target attribute)'],
                  '3.0.0-4.1.2': ['CVE-2018-14040 (XSS in Collapse)'],
                  '4.0.0-4.1.2': ['CVE-2018-14041 (XSS in data-container)'],
                  '4.0.0-4.3.1': ['CVE-2019-8331 (XSS in tooltip/popover)']
                }
              },
              d3: {
                detection: () => typeof d3 !== 'undefined',
                version: () => d3.version,
                global_var: 'd3',
                vulnerable_versions: {
                  '3.0.0-3.5.17': ['CVE-2021-23648 (Prototype pollution)'],
                  '4.0.0-7.0.0': ['Various XSS issues in data binding']
                }
              }
            };

            // Detect frameworks and versions
            Object.keys(frameworks).forEach(frameworkName => {
              const framework = frameworks[frameworkName];
              try {
                if (framework.detection()) {
                  const version = framework.version();
                  window.frameworkVulnResults.detected_frameworks[frameworkName] = {
                    detected: true,
                    version: version,
                    global_variable: framework.global_var,
                    vulnerable_versions: framework.vulnerable_versions
                  };

                  // Check for known vulnerabilities
                  if (version && version !== 'detected') {
                    Object.keys(framework.vulnerable_versions).forEach(versionRange => {
                      if (isVersionInRange(version, versionRange)) {
                        framework.vulnerable_versions[versionRange].forEach(vuln => {
                          window.frameworkVulnResults.vulnerabilities.push({
                            framework: frameworkName,
                            version: version,
                            vulnerability: vuln,
                            version_range: versionRange,
                            severity: getSeverityFromCVE(vuln),
                            type: 'known_vulnerability'
                          });
                        });
                      }
                    });
                  }
                }
              } catch (e) {
                window.frameworkVulnResults.test_results.push(`${frameworkName}_detection_error: ${e.message}`);
              }
            });

            // Helper function to check version ranges
            function isVersionInRange(version, range) {
              try {
                const [minVersion, maxVersion] = range.split('-');
                return compareVersions(version, minVersion) >= 0 &&
                       compareVersions(version, maxVersion) <= 0;
              } catch (e) {
                return false;
              }
            }

            // Simple version comparison
            function compareVersions(v1, v2) {
              const parts1 = v1.split('.').map(n => parseInt(n) || 0);
              const parts2 = v2.split('.').map(n => parseInt(n) || 0);

              for (let i = 0; i < Math.max(parts1.length, parts2.length); i++) {
                const part1 = parts1[i] || 0;
                const part2 = parts2[i] || 0;

                if (part1 > part2) return 1;
                if (part1 < part2) return -1;
              }
              return 0;
            }

            // Get severity from CVE description
            function getSeverityFromCVE(vuln) {
              if (vuln.includes('XSS') || vuln.includes('injection')) return 'high';
              if (vuln.includes('pollution') || vuln.includes('SSRF')) return 'medium';
              if (vuln.includes('ReDoS') || vuln.includes('DoS')) return 'medium';
              return 'low';
            }

            return window.frameworkVulnResults;

      # Test jQuery-specific vulnerabilities
      - action: script
        name: test_jquery_vulnerabilities
        args:
          code: |
            window.frameworkVulnResults.test_results.push('jquery_vulnerability_tests');

            if (window.frameworkVulnResults.detected_frameworks.jquery) {
              const jqVersion = window.frameworkVulnResults.detected_frameworks.jquery.version;

              // Test for prototype pollution (CVE-2019-11358)
              try {
                window.jqueryPrototypeTest = false;
                const maliciousObj = JSON.parse('{"__proto__": {"jqueryPolluted": true}}');
                $.extend(true, {}, maliciousObj);

                if (({}).jqueryPolluted === true) {
                  window.frameworkVulnResults.vulnerabilities.push({
                    framework: 'jquery',
                    version: jqVersion,
                    vulnerability: 'CVE-2019-11358 - Prototype pollution via $.extend',
                    severity: 'high',
                    type: 'runtime_confirmed',
                    confirmed: true,
                    test: 'prototype_pollution'
                  });
                  window.jqueryPrototypeTest = true;
                }

                // Clean up
                delete Object.prototype.jqueryPolluted;
              } catch (e) {
                window.frameworkVulnResults.test_results.push('jquery_prototype_test_error: ' + e.message);
              }

              // Test for XSS via HTML parsing (CVE-2020-11022)
              try {
                window.jqueryXSSTest = false;
                const testHtml = '<option><iframe></select><img src=x onerror=window.jqueryXSSTest=true>';
                const parsed = $(testHtml);

                // Check if malicious content was parsed
                setTimeout(() => {
                  if (window.jqueryXSSTest === true ||
                      parsed.find('img').length > 0 ||
                      parsed.html().includes('onerror')) {
                    window.frameworkVulnResults.vulnerabilities.push({
                      framework: 'jquery',
                      version: jqVersion,
                      vulnerability: 'CVE-2020-11022 - XSS via HTML parsing',
                      severity: 'high',
                      type: 'runtime_confirmed',
                      confirmed: window.jqueryXSSTest === true,
                      test: 'html_parsing_xss'
                    });
                  }
                }, 100);
              } catch (e) {
                window.frameworkVulnResults.test_results.push('jquery_xss_test_error: ' + e.message);
              }

              // Test for unsafe selector usage
              try {
                const unsafeSelector = location.hash || '#test';
                if (unsafeSelector.includes('<') || unsafeSelector.includes('script')) {
                  window.frameworkVulnResults.configuration_issues.push({
                    framework: 'jquery',
                    issue: 'unsafe_selector_usage',
                    description: 'Application uses location.hash directly in jQuery selectors',
                    severity: 'medium',
                    example: '$(location.hash) can lead to XSS'
                  });
                }
              } catch (e) {
                window.frameworkVulnResults.test_results.push('jquery_selector_test_error: ' + e.message);
              }
            }

            return window.frameworkVulnResults;

      # Test Angular-specific vulnerabilities
      - action: script
        name: test_angular_vulnerabilities
        args:
          code: |
            window.frameworkVulnResults.test_results.push('angular_vulnerability_tests');

            if (window.frameworkVulnResults.detected_frameworks.angular) {
              const ngVersion = window.frameworkVulnResults.detected_frameworks.angular.version;

              // Test for Angular Expression injection
              try {
                window.angularExprTest = false;

                // Look for ng-bind or similar directives that might be vulnerable
                const ngElements = document.querySelectorAll('[ng-bind], [ng-bind-html], [ng-bind-unsafe]');
                if (ngElements.length > 0) {
                  window.frameworkVulnResults.configuration_issues.push({
                    framework: 'angular',
                    issue: 'expression_injection_risk',
                    description: 'Found Angular binding directives that may be vulnerable to expression injection',
                    severity: 'high',
                    count: ngElements.length,
                    example: 'ng-bind with user input can execute arbitrary expressions'
                  });
                }

                // Test for bypassSecurityTrust usage (if available)
                if (typeof angular !== 'undefined' && angular.element) {
                  try {
                    const rootScope = angular.element(document.body).scope();
                    if (rootScope && rootScope.$root) {
                      // Check for dangerous trust bypasses in scope
                      const scopeKeys = Object.keys(rootScope);
                      scopeKeys.forEach(key => {
                        if (typeof rootScope[key] === 'string' &&
                            rootScope[key].includes('<script>')) {
                          window.frameworkVulnResults.configuration_issues.push({
                            framework: 'angular',
                            issue: 'unsafe_html_binding',
                            description: 'Scope contains potentially unsafe HTML content',
                            severity: 'high',
                            scope_key: key
                          });
                        }
                      });
                    }
                  } catch (e) {
                    // Continue testing
                  }
                }

              } catch (e) {
                window.frameworkVulnResults.test_results.push('angular_expression_test_error: ' + e.message);
              }

              // Test for CSP bypass via Angular
              try {
                const cspMeta = document.querySelector('meta[http-equiv="Content-Security-Policy"]');
                if (cspMeta && cspMeta.content.includes('unsafe-eval')) {
                  window.frameworkVulnResults.configuration_issues.push({
                    framework: 'angular',
                    issue: 'csp_unsafe_eval',
                    description: 'CSP allows unsafe-eval which enables Angular expression evaluation',
                    severity: 'medium',
                    recommendation: 'Use Angular CSP mode or remove unsafe-eval'
                  });
                }
              } catch (e) {
                window.frameworkVulnResults.test_results.push('angular_csp_test_error: ' + e.message);
              }
            }

            return window.frameworkVulnResults;

      # Test React-specific vulnerabilities
      - action: script
        name: test_react_vulnerabilities
        args:
          code: |
            window.frameworkVulnResults.test_results.push('react_vulnerability_tests');

            if (window.frameworkVulnResults.detected_frameworks.react) {
              const reactVersion = window.frameworkVulnResults.detected_frameworks.react.version;

              // Test for dangerouslySetInnerHTML usage
              try {
                const reactElements = document.querySelectorAll('[data-reactroot], [data-reactid]');
                if (reactElements.length > 0) {
                  // Check page content for dangerous patterns
                  const pageContent = document.documentElement.outerHTML;
                  if (pageContent.includes('dangerouslySetInnerHTML') ||
                      pageContent.includes('__html')) {
                    window.frameworkVulnResults.configuration_issues.push({
                      framework: 'react',
                      issue: 'dangerous_inner_html_usage',
                      description: 'Application uses dangerouslySetInnerHTML which can lead to XSS',
                      severity: 'high',
                      recommendation: 'Sanitize HTML content before using dangerouslySetInnerHTML'
                    });
                  }
                }

                // Test for href JavaScript execution
                const jsHrefs = document.querySelectorAll('a[href^="javascript:"]');
                if (jsHrefs.length > 0) {
                  window.frameworkVulnResults.configuration_issues.push({
                    framework: 'react',
                    issue: 'javascript_href_usage',
                    description: 'Found javascript: URLs which React may not properly sanitize',
                    severity: 'medium',
                    count: jsHrefs.length
                  });
                }

              } catch (e) {
                window.frameworkVulnResults.test_results.push('react_dangerous_html_test_error: ' + e.message);
              }

              // Test for React DevTools exposure
              try {
                if (window.__REACT_DEVTOOLS_GLOBAL_HOOK__) {
                  window.frameworkVulnResults.configuration_issues.push({
                    framework: 'react',
                    issue: 'react_devtools_exposed',
                    description: 'React DevTools are enabled in production',
                    severity: 'low',
                    recommendation: 'Disable React DevTools in production builds'
                  });
                }
              } catch (e) {
                window.frameworkVulnResults.test_results.push('react_devtools_test_error: ' + e.message);
              }
            }

            return window.frameworkVulnResults;

      # Test Lodash-specific vulnerabilities
      - action: script
        name: test_lodash_vulnerabilities
        args:
          code: |
            window.frameworkVulnResults.test_results.push('lodash_vulnerability_tests');

            if (window.frameworkVulnResults.detected_frameworks.lodash) {
              const lodashVersion = window.frameworkVulnResults.detected_frameworks.lodash.version;

              // Test for prototype pollution vulnerabilities
              try {
                window.lodashPrototypeTest = false;

                // Test merge function (CVE-2018-16487)
                const maliciousPayload = JSON.parse('{"__proto__": {"lodashPolluted": true}}');
                _.merge({}, maliciousPayload);

                if (({}).lodashPolluted === true) {
                  window.frameworkVulnResults.vulnerabilities.push({
                    framework: 'lodash',
                    version: lodashVersion,
                    vulnerability: 'CVE-2018-16487 - Prototype pollution via _.merge',
                    severity: 'high',
                    type: 'runtime_confirmed',
                    confirmed: true,
                    test: 'merge_prototype_pollution'
                  });
                  window.lodashPrototypeTest = true;
                }

                // Clean up
                delete Object.prototype.lodashPolluted;

                // Test zipObjectDeep function (CVE-2020-8203)
                if (typeof _.zipObjectDeep === 'function') {
                  try {
                    const keys = ['__proto__.zipPolluted'];
                    const values = [true];
                    _.zipObjectDeep(keys, values);

                    if (({}).zipPolluted === true) {
                      window.frameworkVulnResults.vulnerabilities.push({
                        framework: 'lodash',
                        version: lodashVersion,
                        vulnerability: 'CVE-2020-8203 - Prototype pollution via _.zipObjectDeep',
                        severity: 'high',
                        type: 'runtime_confirmed',
                        confirmed: true,
                        test: 'zipObjectDeep_prototype_pollution'
                      });
                    }

                    // Clean up
                    delete Object.prototype.zipPolluted;
                  } catch (e) {
                    // Function might not exist in older versions
                  }
                }

              } catch (e) {
                window.frameworkVulnResults.test_results.push('lodash_prototype_test_error: ' + e.message);
              }

              // Test template function vulnerabilities
              try {
                if (typeof _.template === 'function') {
                  // Check if template function is used with user input
                  const pageContent = document.documentElement.outerHTML;
                  if (pageContent.includes('_.template') || pageContent.includes('template(')) {
                    window.frameworkVulnResults.configuration_issues.push({
                      framework: 'lodash',
                      issue: 'template_function_usage',
                      description: 'Lodash template function detected - potential template injection risk',
                      severity: 'medium',
                      recommendation: 'Validate and sanitize all template input'
                    });
                  }
                }
              } catch (e) {
                window.frameworkVulnResults.test_results.push('lodash_template_test_error: ' + e.message);
              }
            }

            return window.frameworkVulnResults;

      # Test general JavaScript security issues
      - action: script
        name: test_general_js_security
        args:
          code: |
            window.frameworkVulnResults.test_results.push('general_js_security_tests');

            // Test for eval usage
            try {
              const pageContent = document.documentElement.outerHTML;
              const scripts = Array.from(document.scripts);

              let evalUsageFound = false;
              scripts.forEach((script, index) => {
                if (script.textContent && script.textContent.includes('eval(')) {
                  evalUsageFound = true;
                  window.frameworkVulnResults.configuration_issues.push({
                    framework: 'general',
                    issue: 'eval_usage',
                    description: 'eval() function usage detected in script',
                    severity: 'high',
                    script_index: index,
                    recommendation: 'Replace eval() with safer alternatives'
                  });
                }
              });

              // Test for Function constructor usage
              if (pageContent.includes('Function(') || pageContent.includes('new Function')) {
                window.frameworkVulnResults.configuration_issues.push({
                  framework: 'general',
                  issue: 'function_constructor_usage',
                  description: 'Function constructor usage detected',
                  severity: 'medium',
                  recommendation: 'Avoid dynamic code generation'
                });
              }

            } catch (e) {
              window.frameworkVulnResults.test_results.push('general_eval_test_error: ' + e.message);
            }

            // Test for insecure random number generation
            try {
              const mathRandomUsage = document.documentElement.outerHTML.includes('Math.random');
              if (mathRandomUsage) {
                window.frameworkVulnResults.configuration_issues.push({
                  framework: 'general',
                  issue: 'weak_random_generation',
                  description: 'Math.random() usage detected - not cryptographically secure',
                  severity: 'low',
                  recommendation: 'Use crypto.getRandomValues() for security-sensitive randomness'
                });
              }
            } catch (e) {
              window.frameworkVulnResults.test_results.push('general_random_test_error: ' + e.message);
            }

            return window.frameworkVulnResults;

      # Final framework vulnerability assessment
      - action: script
        name: final_framework_assessment
        args:
          code: |
            // Calculate comprehensive framework vulnerability risk score
            let riskScore = 0;

            // Count high-risk vulnerabilities
            const confirmedVulns = window.frameworkVulnResults.vulnerabilities.filter(v => v.type === 'runtime_confirmed');
            const knownVulns = window.frameworkVulnResults.vulnerabilities;
            const configIssues = window.frameworkVulnResults.configuration_issues;

            knownVulns.forEach(vuln => {
              switch (vuln.severity) {
                case 'critical': riskScore += 35; break;
                case 'high': riskScore += 25; break;
                case 'medium': riskScore += 15; break;
                case 'low': riskScore += 5; break;
              }
            });

            configIssues.forEach(issue => {
              switch (issue.severity) {
                case 'high': riskScore += 20; break;
                case 'medium': riskScore += 10; break;
                case 'low': riskScore += 5; break;
              }
            });

            // Additional risk for multiple vulnerable frameworks
            const vulnerableFrameworks = Object.keys(window.frameworkVulnResults.detected_frameworks).length;
            riskScore += vulnerableFrameworks * 3;

            window.frameworkVulnResults.risk_assessment = {
              total_vulnerabilities: knownVulns.length,
              confirmed_vulnerabilities: confirmedVulns.length,
              configuration_issues: configIssues.length,
              frameworks_detected: vulnerableFrameworks,
              risk_score: Math.min(riskScore, 100),
              risk_level: riskScore > 70 ? 'Critical' :
                         riskScore > 50 ? 'High' :
                         riskScore > 30 ? 'Medium' : 'Low',
              recommendations: []
            };

            // Generate specific recommendations
            if (confirmedVulns.length > 0) {
              window.frameworkVulnResults.risk_assessment.recommendations.push(
                'Update vulnerable JavaScript frameworks to latest versions',
                'Implement Subresource Integrity (SRI) for all external scripts',
                'Regular security scanning of JavaScript dependencies'
              );
            }

            if (configIssues.some(issue => issue.issue.includes('eval'))) {
              window.frameworkVulnResults.risk_assessment.recommendations.push(
                'Eliminate eval() and Function constructor usage',
                'Implement Content Security Policy to prevent code injection'
              );
            }

            if (configIssues.some(issue => issue.issue.includes('prototype'))) {
              window.frameworkVulnResults.risk_assessment.recommendations.push(
                'Implement prototype pollution protection',
                'Use Map objects instead of plain objects for dynamic data'
              );
            }

            if (vulnerableFrameworks > 3) {
              window.frameworkVulnResults.risk_assessment.recommendations.push(
                'Reduce JavaScript framework dependencies',
                'Implement automated dependency vulnerability scanning'
              );
            }

            window.frameworkVulnResults.summary = {
              scan_completed: true,
              timestamp: new Date().toISOString(),
              framework_vulnerabilities_found: knownVulns.length > 0,
              runtime_vulnerabilities_confirmed: confirmedVulns.length > 0,
              frameworks_analyzed: vulnerableFrameworks,
              comprehensive_testing_completed: true
            };

            return window.frameworkVulnResults;

    extractors:
      - type: regex
        name: framework_vuln_summary
        part: body
        regex:
          - '"scan_completed":\s*true'

      - type: regex
        name: confirmed_framework_vulns
        part: body
        regex:
          - '"runtime_vulnerabilities_confirmed":\s*true'

    matchers:
      - type: regex
        name: framework_vulnerabilities_detected
        regex:
          - '"framework_vulnerabilities_found":\s*true'

      - type: regex
        name: critical_framework_vulnerabilities
        regex:
          - '"risk_level":\s*"Critical"'

# Headless template for comprehensive JavaScript framework vulnerability scanning