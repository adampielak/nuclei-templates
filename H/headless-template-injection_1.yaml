id: headless-template-injection

info:
  name: Client-Side Template Injection Detector
  author: geeknik
  severity: high
  description: |
    Advanced client-side template injection detection using Headless Protocol for
    comprehensive template engine analysis. This template performs template syntax
    testing, expression evaluation, and sandbox escape detection across multiple
    client-side template engines including Angular, Vue.js, Handlebars, Mustache,
    and custom template systems while maintaining defensive research principles.
  reference:
    - https://portswigger.net/research/server-side-template-injection
    - https://owasp.org/www-project-web-security-testing-guide/
    - https://book.hacktricks.xyz/pentesting-web/ssti-server-side-template-injection
  tags: template-injection,client-side,headless,angular,vue,handlebars,defensive

headless:
  - steps:
      # Navigate to target page
      - action: navigate
        args:
          url: "{{BaseURL}}"

      # Wait for page to fully load
      - action: waitload

      # Initialize template injection testing framework
      - action: script
        name: initialize_template_testing
        args:
          code: |
            (function() {
              window.templateInjectionResults = {
                template_engines: {},
                vulnerabilities: [],
                test_results: [],
                payloads_tested: [],
                expression_contexts: [],
                risk_assessment: {}
              };

              // Detect client-side template engines
              window.templateInjectionResults.template_engines = {
                angular: {
                  present: typeof angular !== 'undefined',
                  version: typeof angular !== 'undefined' ? angular.version : null,
                  scope_available: typeof angular !== 'undefined' && angular.element && angular.element(document.body) && angular.element(document.body).scope,
                  directives_found: []
                },
                angularjs: {
                  present: document.querySelector('[ng-app], [data-ng-app], .ng-scope') !== null,
                  interpolation_syntax: '{{}}',
                  directives: document.querySelectorAll('[ng-bind], [ng-model], [ng-click]').length
                },
                vue: {
                  present: typeof Vue !== 'undefined' || document.querySelector('[v-model], [v-if], [v-for]') !== null,
                  version: typeof Vue !== 'undefined' ? Vue.version : null,
                  interpolation_syntax: '{{}}',
                  directives: document.querySelectorAll('[v-model], [v-if], [v-for]').length
                },
                handlebars: {
                  present: typeof Handlebars !== 'undefined',
                  version: typeof Handlebars !== 'undefined' ? Handlebars.VERSION : null,
                  interpolation_syntax: '{{}}'
                },
                mustache: {
                  present: typeof Mustache !== 'undefined',
                  version: typeof Mustache !== 'undefined' ? Mustache.version : null,
                  interpolation_syntax: '{{}}'
                },
                lodash: {
                  present: typeof _ !== 'undefined' && typeof _.template === 'function',
                  version: typeof _ !== 'undefined' ? _.VERSION : null,
                  interpolation_syntax: '<%= %>'
                },
                custom: {
                  template_strings: [],
                  interpolation_patterns: []
                }
              };

              // Scan for template syntax in page content
              var pageContent = document.documentElement.outerHTML;
              var templatePatterns = [
                /\{\{[^}]+\}\}/g,           // {{ }} syntax
                /\{%[^%]+%\}/g,            // {% %} syntax
                /<%[^%]+%>/g,              // <% %> syntax
                /\$\{[^}]+\}/g,            // ${ } syntax
                /\[\[[^\]]+\]\]/g,         // [[ ]] syntax
                /#\{[^}]+\}/g              // #{ } syntax
              ];

              for (var i = 0; i < templatePatterns.length; i++) {
                var pattern = templatePatterns[i];
                var matches = pageContent.match(pattern);
                if (matches && matches.length > 0) {
                  window.templateInjectionResults.template_engines.custom.template_strings.push({
                    pattern_index: i,
                    matches: matches.slice(0, 10), // Limit for performance
                    count: matches.length
                  });
                }
              }

              return window.templateInjectionResults;
            })();

      # Test Angular/AngularJS template injection
      - action: script
        name: test_angular_injection
        args:
          code: |
            (function() {
              window.templateInjectionResults.test_results.push('angular_injection');

              if (window.templateInjectionResults.template_engines.angular.present ||
                  window.templateInjectionResults.template_engines.angularjs.present) {

                // Test basic Angular expression injection
                var angularPayloads = [
                  '{{7*7}}',
                  '{{constructor.constructor("alert(1)")()}}',
                  '{{[].constructor.constructor("alert(1)")()}}',
                  '{{("").constructor.constructor("alert(1)")()}}',
                  '{{$eval.constructor("alert(1)")()}}',
                  '{{$parent.$eval.constructor("alert(1)")()}}',
                  '{{$root.constructor.constructor("alert(1)")()}}'
                ];

                window.templateInjectionResults.payloads_tested =
                  window.templateInjectionResults.payloads_tested.concat(angularPayloads);

                // Test expression evaluation in different contexts
                try {
                  // Create test elements with Angular interpolation
                  for (var i = 0; i < angularPayloads.length; i++) {
                    var payload = angularPayloads[i];
                    try {
                      window['angularTest' + i] = false;

                      // Modify payload to set test variable instead of alert
                      var testPayload = payload.replace('alert(1)', 'window.angularTest' + i + '=true');

                      // Test in different contexts
                      var contexts = [
                        // Text interpolation
                        function(tp) {
                          var testDiv = document.createElement('div');
                          testDiv.innerHTML = tp;
                          testDiv.setAttribute('ng-bind-html', tp);
                          document.body.appendChild(testDiv);
                          return testDiv;
                        },
                        // Attribute interpolation
                        function(tp) {
                          var testInput = document.createElement('input');
                          testInput.setAttribute('ng-model', 'test');
                          testInput.setAttribute('placeholder', tp);
                          document.body.appendChild(testInput);
                          return testInput;
                        }
                      ];

                      for (var j = 0; j < contexts.length; j++) {
                        var createContext = contexts[j];
                        try {
                          var element = createContext(testPayload);

                          // Simulate Angular compilation if possible
                          if (typeof angular !== 'undefined' && angular.element) {
                            try {
                              var scope = angular.element(document.body).scope();
                              if (scope) {
                                scope.$apply();
                              }
                            } catch (e) {
                              // Continue testing
                            }
                          }

                          setTimeout(function(idx, pl, ctx) {
                            return function() {
                              if (window['angularTest' + idx] === true) {
                                window.templateInjectionResults.vulnerabilities.push({
                                  type: 'angular_template_injection',
                                  engine: 'Angular/AngularJS',
                                  payload: pl,
                                  context: ctx === 0 ? 'text_interpolation' : 'attribute_interpolation',
                                  severity: 'high',
                                  confirmed: true
                                });
                              }
                              try {
                                document.body.removeChild(element);
                              } catch (e) {
                                // Element might already be removed
                              }
                            };
                          }(i, payload, j), 200);

                        } catch (e) {
                          // Continue with next context
                        }
                      }

                    } catch (e) {
                      window.templateInjectionResults.test_results.push('angular_payload_' + i + '_error: ' + e.message);
                    }
                  }

                } catch (e) {
                  window.templateInjectionResults.test_results.push('angular_test_error: ' + e.message);
                }
              }

              return window.templateInjectionResults;
            })();

      # Test Vue.js template injection
      - action: script
        name: test_vue_injection
        args:
          code: |
            (function() {
              window.templateInjectionResults.test_results.push('vue_injection');

              if (window.templateInjectionResults.template_engines.vue.present) {

                var vuePayloads = [
                  '{{7*7}}',
                  '{{constructor.constructor("alert(1)")()}}',
                  '{{this.constructor.constructor("alert(1)")()}}',
                  '{{$parent.constructor.constructor("alert(1)")()}}',
                  '{{("").constructor.constructor("alert(1)")()}}'
                ];

                window.templateInjectionResults.payloads_tested =
                  window.templateInjectionResults.payloads_tested.concat(vuePayloads);

                try {
                  for (var i = 0; i < vuePayloads.length; i++) {
                    var payload = vuePayloads[i];
                    try {
                      window['vueTest' + i] = false;

                      var testPayload = payload.replace('alert(1)', 'window.vueTest' + i + '=true');

                      // Test Vue template contexts
                      var vueTestDiv = document.createElement('div');
                      vueTestDiv.innerHTML = '<span v-text="' + testPayload + '"></span>';
                      vueTestDiv.setAttribute('v-html', testPayload);
                      document.body.appendChild(vueTestDiv);

                      // Try to initialize Vue if available
                      if (typeof Vue !== 'undefined') {
                        try {
                          new Vue({
                            el: vueTestDiv,
                            data: {
                              message: testPayload
                            }
                          });
                        } catch (e) {
                          // Continue testing
                        }
                      }

                      setTimeout(function(idx, pl, element) {
                        return function() {
                          if (window['vueTest' + idx] === true) {
                            window.templateInjectionResults.vulnerabilities.push({
                              type: 'vue_template_injection',
                              engine: 'Vue.js',
                              payload: pl,
                              context: 'vue_directive',
                              severity: 'high',
                              confirmed: true
                            });
                          }
                          try {
                            document.body.removeChild(element);
                          } catch (e) {
                            // Element might already be removed
                          }
                        };
                      }(i, payload, vueTestDiv), 200);

                    } catch (e) {
                      window.templateInjectionResults.test_results.push('vue_payload_' + i + '_error: ' + e.message);
                    }
                  }

                } catch (e) {
                  window.templateInjectionResults.test_results.push('vue_test_error: ' + e.message);
                }
              }

              return window.templateInjectionResults;
            })();

      # Test Handlebars template injection
      - action: script
        name: test_handlebars_injection
        args:
          code: |
            (function() {
              window.templateInjectionResults.test_results.push('handlebars_injection');

              if (window.templateInjectionResults.template_engines.handlebars.present) {

                var handlebarsPayloads = [
                  '{{#with "constructor"}}{{#with ../constructor}}{{#with constructor}}{{#each constructor}}{{@key}}{{/each}}{{/with}}{{/with}}{{/with}}',
                  '{{lookup (lookup this "constructor") "constructor"}}',
                  '{{#with this}}{{lookup ../constructor "constructor"}}{{/with}}',
                  '{{constructor.constructor}}',
                  '{{lookup this "constructor"}}'
                ];

                window.templateInjectionResults.payloads_tested =
                  window.templateInjectionResults.payloads_tested.concat(handlebarsPayloads);

                try {
                  for (var i = 0; i < handlebarsPayloads.length; i++) {
                    var payload = handlebarsPayloads[i];
                    try {
                      window['handlebarsTest' + i] = false;

                      // Test Handlebars compilation
                      if (typeof Handlebars !== 'undefined' && Handlebars.compile) {
                        try {
                          var template = Handlebars.compile(payload);
                          var context = {
                            test: 'value',
                            constructor: function() { window['handlebarsTest' + i] = true; }
                          };

                          var result = template(context);

                          if (window['handlebarsTest' + i] === true ||
                              result.indexOf('function') !== -1 ||
                              result.indexOf('constructor') !== -1) {

                            window.templateInjectionResults.vulnerabilities.push({
                              type: 'handlebars_template_injection',
                              engine: 'Handlebars',
                              payload: payload,
                              context: 'template_compilation',
                              severity: 'high',
                              confirmed: window['handlebarsTest' + i] === true,
                              result: result
                            });
                          }
                        } catch (e) {
                          // Template compilation might fail for malicious payloads
                          if (e.message.indexOf('constructor') !== -1 || e.message.indexOf('prototype') !== -1) {
                            window.templateInjectionResults.vulnerabilities.push({
                              type: 'handlebars_template_injection',
                              engine: 'Handlebars',
                              payload: payload,
                              context: 'compilation_error',
                              severity: 'medium',
                              confirmed: false,
                              error: e.message
                            });
                          }
                        }
                      }

                    } catch (e) {
                      window.templateInjectionResults.test_results.push('handlebars_payload_' + i + '_error: ' + e.message);
                    }
                  }

                } catch (e) {
                  window.templateInjectionResults.test_results.push('handlebars_test_error: ' + e.message);
                }
              }

              return window.templateInjectionResults;
            })();

      # Test Lodash template injection
      - action: script
        name: test_lodash_injection
        args:
          code: |
            (function() {
              window.templateInjectionResults.test_results.push('lodash_injection');

              if (window.templateInjectionResults.template_engines.lodash.present) {

                var lodashPayloads = [
                  '<%= 7*7 %>',
                  '<%= this.constructor.constructor("alert(1)")() %>',
                  '<%= constructor.constructor("alert(1)")() %>',
                  '<%= (function(){return this})().constructor.constructor("alert(1)")() %>',
                  '<%= ("").constructor.constructor("alert(1)")() %>'
                ];

                window.templateInjectionResults.payloads_tested =
                  window.templateInjectionResults.payloads_tested.concat(lodashPayloads);

                try {
                  for (var i = 0; i < lodashPayloads.length; i++) {
                    var payload = lodashPayloads[i];
                    try {
                      window['lodashTest' + i] = false;

                      var testPayload = payload.replace('alert(1)', 'window.lodashTest' + i + '=true');

                      // Test Lodash template compilation
                      if (typeof _ !== 'undefined' && _.template) {
                        try {
                          var template = _.template(testPayload);
                          var result = template();

                          if (window['lodashTest' + i] === true ||
                              (typeof result === 'string' && result.indexOf('49') !== -1)) { // 7*7 = 49

                            window.templateInjectionResults.vulnerabilities.push({
                              type: 'lodash_template_injection',
                              engine: 'Lodash',
                              payload: payload,
                              context: 'template_compilation',
                              severity: 'high',
                              confirmed: window['lodashTest' + i] === true,
                              result: result
                            });
                          }
                        } catch (e) {
                          // Template compilation error might indicate vulnerability attempt
                          if (e.message.indexOf('constructor') !== -1 ||
                              e.message.indexOf('process') !== -1 ||
                              e.message.indexOf('require') !== -1) {
                            window.templateInjectionResults.vulnerabilities.push({
                              type: 'lodash_template_injection',
                              engine: 'Lodash',
                              payload: payload,
                              context: 'compilation_error',
                              severity: 'medium',
                              confirmed: false,
                              error: e.message
                            });
                          }
                        }
                      }

                    } catch (e) {
                      window.templateInjectionResults.test_results.push('lodash_payload_' + i + '_error: ' + e.message);
                    }
                  }

                } catch (e) {
                  window.templateInjectionResults.test_results.push('lodash_test_error: ' + e.message);
                }
              }

              return window.templateInjectionResults;
            })();

      # Test custom template engine detection and injection
      - action: script
        name: test_custom_template_injection
        args:
          code: |
            (function() {
              window.templateInjectionResults.test_results.push('custom_template_injection');

              // Test various interpolation syntaxes found in page
              var customPayloads = [
                { syntax: '{{}}', payloads: ['{{7*7}}', '{{constructor.constructor}}'] },
                { syntax: '<%%>', payloads: ['<%=7*7%>', '<%=constructor.constructor%>'] },
                { syntax: '${}', payloads: ['${7*7}', '${constructor.constructor}'] },
                { syntax: '[[]]', payloads: ['[[7*7]]', '[[constructor.constructor]]'] },
                { syntax: '#{}', payloads: ['#{7*7}', '#{constructor.constructor}'] }
              ];

              // Test for reflection of payloads in page content
              try {
                for (var i = 0; i < customPayloads.length; i++) {
                  var syntaxGroup = customPayloads[i];
                  for (var j = 0; j < syntaxGroup.payloads.length; j++) {
                    var payload = syntaxGroup.payloads[j];
                    try {
                      // Create a test element with the payload
                      var testDiv = document.createElement('div');
                      testDiv.innerHTML = payload;
                      testDiv.setAttribute('data-test-payload', payload);
                      document.body.appendChild(testDiv);

                      // Check if the payload gets processed/evaluated
                      setTimeout(function(groupIdx, payloadIdx, pl, syntax, element) {
                        return function() {
                          var elementContent = element.innerHTML;
                          var elementText = element.textContent;

                          // Check for mathematical evaluation (7*7 = 49)
                          if (elementContent.indexOf('49') !== -1 || elementText.indexOf('49') !== -1) {
                            window.templateInjectionResults.vulnerabilities.push({
                              type: 'custom_template_injection',
                              engine: 'Unknown/Custom',
                              syntax: syntax,
                              payload: pl,
                              context: 'mathematical_evaluation',
                              severity: 'medium',
                              confirmed: true,
                              result: elementContent
                            });
                          }

                          // Check for constructor access
                          if (elementContent.indexOf('function') !== -1 ||
                              elementContent.indexOf('constructor') !== -1 ||
                              elementText.indexOf('function') !== -1) {
                            window.templateInjectionResults.vulnerabilities.push({
                              type: 'custom_template_injection',
                              engine: 'Unknown/Custom',
                              syntax: syntax,
                              payload: pl,
                              context: 'constructor_access',
                              severity: 'high',
                              confirmed: true,
                              result: elementContent
                            });
                          }

                          try {
                            document.body.removeChild(element);
                          } catch (e) {
                            // Element might already be removed
                          }
                        };
                      }(i, j, payload, syntaxGroup.syntax, testDiv), 300);

                    } catch (e) {
                      window.templateInjectionResults.test_results.push(
                        'custom_payload_' + i + '_' + j + '_error: ' + e.message
                      );
                    }
                  }
                }

              } catch (e) {
                window.templateInjectionResults.test_results.push('custom_template_test_error: ' + e.message);
              }

              return window.templateInjectionResults;
            })();

      # Test URL parameter template injection
      - action: navigate
        args:
          url: "{{BaseURL}}?name={{7*7}}&template=<%=constructor.constructor%>&expr=${7*7}"

      - action: waitload

      - action: script
        name: test_url_parameter_injection
        args:
          code: |
            (function() {
              window.templateInjectionResults.test_results.push('url_parameter_injection');

              try {
                // Check if URL parameters are reflected and processed as templates
                var pageContent = document.documentElement.outerHTML;
                var urlParams = new URLSearchParams(window.location.search);

                // Check for mathematical evaluation in page content
                if (pageContent.indexOf('49') !== -1) {
                  window.templateInjectionResults.vulnerabilities.push({
                    type: 'url_parameter_template_injection',
                    engine: 'Server/Client-side processing',
                    vector: 'URL parameters',
                    payload: '{{7*7}} or ${7*7}',
                    context: 'url_parameter_reflection',
                    severity: 'high',
                    confirmed: true,
                    description: 'URL parameters are processed as template expressions'
                  });
                }

                // Check for constructor/function reflection
                if (pageContent.indexOf('function') !== -1 &&
                    (pageContent.indexOf('constructor') !== -1 || urlParams.has('template'))) {
                  window.templateInjectionResults.vulnerabilities.push({
                    type: 'url_parameter_template_injection',
                    engine: 'Server/Client-side processing',
                    vector: 'URL parameters',
                    payload: '<%=constructor.constructor%>',
                    context: 'constructor_access_via_url',
                    severity: 'critical',
                    confirmed: true,
                    description: 'Constructor access via URL parameter template injection'
                  });
                }

              } catch (e) {
                window.templateInjectionResults.test_results.push('url_parameter_test_error: ' + e.message);
              }

              return window.templateInjectionResults;
            })();

      # Final template injection assessment
      - action: script
        name: final_template_assessment
        args:
          code: |
            (function() {
              // Calculate comprehensive template injection risk score
              var riskScore = 0;
              var confirmedVulns = [];

              for (var i = 0; i < window.templateInjectionResults.vulnerabilities.length; i++) {
                if (window.templateInjectionResults.vulnerabilities[i].confirmed) {
                  confirmedVulns.push(window.templateInjectionResults.vulnerabilities[i]);
                }
              }

              for (var j = 0; j < confirmedVulns.length; j++) {
                var vuln = confirmedVulns[j];
                switch (vuln.severity) {
                  case 'critical': riskScore += 40; break;
                  case 'high': riskScore += 30; break;
                  case 'medium': riskScore += 20; break;
                  case 'low': riskScore += 10; break;
                }
              }

              // Additional risk factors
              var templateEnginesPresent = 0;
              var engines = window.templateInjectionResults.template_engines;

              for (var engineName in engines) {
                var engine = engines[engineName];
                if (engine.present || (engine.directives && engine.directives > 0)) {
                  templateEnginesPresent++;
                }
              }

              riskScore += templateEnginesPresent * 5;

              window.templateInjectionResults.risk_assessment = {
                total_vulnerabilities: confirmedVulns.length,
                template_engines_detected: templateEnginesPresent,
                risk_score: Math.min(riskScore, 100),
                risk_level: riskScore > 70 ? 'Critical' :
                           riskScore > 50 ? 'High' :
                           riskScore > 30 ? 'Medium' : 'Low',
                payloads_tested: window.templateInjectionResults.payloads_tested.length,
                test_coverage: window.templateInjectionResults.test_results.length,
                recommendations: []
              };

              window.templateInjectionResults.summary = {
                scan_completed: true,
                timestamp: new Date().toISOString(),
                template_injection_vulnerabilities_found: confirmedVulns.length > 0,
                engines_analyzed: templateEnginesPresent,
                comprehensive_testing_completed: true
              };

              return window.templateInjectionResults;
            })();

    extractors:
      - type: regex
        name: template_injection_summary
        part: body
        regex:
          - '"scan_completed":\s*true'

      - type: regex
        name: confirmed_template_injections
        part: body
        regex:
          - '"confirmed":\s*true'

    matchers:
      - type: regex
        name: template_injection_detected
        regex:
          - '"template_injection_vulnerabilities_found":\s*true'

      - type: regex
        name: critical_template_injection
        regex:
          - '"severity":\s*"critical"'

# Headless template for comprehensive client-side template injection detection