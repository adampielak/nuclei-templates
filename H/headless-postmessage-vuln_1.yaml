id: headless-postmessage-vuln

info:
  name: PostMessage Vulnerability Detector
  author: geeknik
  severity: high
  description: |
    Advanced postMessage vulnerability detection using Headless Protocol for
    comprehensive cross-origin communication analysis. This template performs
    postMessage listener analysis, origin validation testing, data sanitization
    assessment, and cross-frame communication security evaluation to identify
    postMessage vulnerabilities including origin bypass, data injection, and
    privilege escalation while maintaining defensive research principles.
  reference:
    - https://portswigger.net/research/postmessage-vulnerabilities
    - https://owasp.org/www-community/attacks/DOM_Based_XSS
    - https://developer.mozilla.org/en-US/docs/Web/API/Window/postMessage
  tags: postmessage,cross-origin,iframe,headless,client-side,defensive

headless:
  - steps:
      # Navigate to target page
      - action: navigate
        args:
          url: "{{BaseURL}}"

      # Wait for page to fully load
      - action: waitload

      # Initialize postMessage vulnerability testing framework
      - action: script
        name: initialize_postmessage_testing
        args:
          code: |
            window.postMessageResults = {
              listeners: [],
              vulnerabilities: [],
              test_results: [],
              origin_validations: [],
              data_handlers: [],
              iframes_detected: [],
              risk_assessment: {}
            };

            // Detect existing postMessage listeners
            const originalAddEventListener = window.addEventListener;
            const originalOnMessage = window.onmessage;

            // Store original handlers
            window.postMessageResults.original_handlers = {
              addEventListener: originalAddEventListener,
              onmessage: originalOnMessage
            };

            // Hook addEventListener to detect postMessage listeners
            window.addEventListener = function(type, listener, options) {
              if (type === 'message') {
                window.postMessageResults.listeners.push({
                  type: 'addEventListener',
                  listener: listener.toString(),
                  options: options,
                  timestamp: Date.now()
                });
              }
              return originalAddEventListener.call(this, type, listener, options);
            };

            // Check for existing onmessage handlers
            if (window.onmessage) {
              window.postMessageResults.listeners.push({
                type: 'onmessage',
                listener: window.onmessage.toString(),
                timestamp: Date.now()
              });
            }

            // Scan for iframes and frames
            const iframes = document.querySelectorAll('iframe, frame');
            iframes.forEach((frame, index) => {
              window.postMessageResults.iframes_detected.push({
                index: index,
                src: frame.src || frame.getAttribute('src'),
                id: frame.id,
                name: frame.name,
                sandbox: frame.sandbox ? frame.sandbox.toString() : null,
                allow: frame.allow || null
              });
            });

            // Analyze existing postMessage listeners in page scripts
            const scripts = Array.from(document.scripts);
            scripts.forEach((script, scriptIndex) => {
              if (script.textContent) {
                const content = script.textContent;

                // Look for postMessage listener patterns
                const patterns = [
                  /addEventListener\s*\(\s*['"]message['"].*?\)/gi,
                  /onmessage\s*=.*?function/gi,
                  /window\.onmessage/gi,
                  /postMessage\s*\(/gi
                ];

                patterns.forEach((pattern, patternIndex) => {
                  const matches = content.match(pattern);
                  if (matches) {
                    matches.forEach(match => {
                      window.postMessageResults.listeners.push({
                        type: 'script_analysis',
                        script_index: scriptIndex,
                        pattern_index: patternIndex,
                        match: match,
                        context: content.substring(
                          Math.max(0, content.indexOf(match) - 50),
                          Math.min(content.length, content.indexOf(match) + 150)
                        )
                      });
                    });
                  }
                });
              }
            });

            return window.postMessageResults;

      # Test origin validation bypass
      - action: script
        name: test_origin_validation
        args:
          code: |
            window.postMessageResults.test_results.push('origin_validation_testing');

            // Test various origin bypass techniques
            const maliciousOrigins = [
              null,
              'null',
              '',
              'data:',
              'about:blank',
              'javascript:',
              window.location.origin + '.evil.com',
              'evil.com' + window.location.origin,
              window.location.protocol + '//evil.com',
              '*'
            ];

            // Test data injection payloads
            const injectionPayloads = [
              { type: 'xss', data: '<script>window.postMessageXSSTest=true</script>' },
              { type: 'html_injection', data: '<img src=x onerror=window.postMessageHTMLTest=true>' },
              { type: 'javascript', data: 'javascript:window.postMessageJSTest=true' },
              { type: 'eval_injection', data: 'eval("window.postMessageEvalTest=true")' },
              { type: 'dom_manipulation', data: { innerHTML: '<svg onload=window.postMessageDOMTest=true>' } },
              { type: 'prototype_pollution', data: { '__proto__': { 'postMessageProtoPolluted': true } } }
            ];

            // Set up test result tracking
            window.postMessageTestResults = {
              originBypass: false,
              xssExecution: false,
              htmlInjection: false,
              jsExecution: false,
              evalInjection: false,
              domManipulation: false,
              prototypePollution: false
            };

            // Create a temporary postMessage listener for testing
            window.testPostMessageListener = function(event) {
              try {
                window.postMessageResults.origin_validations.push({
                  origin: event.origin,
                  source: event.source ? 'present' : 'null',
                  data: event.data,
                  timestamp: Date.now(),
                  test_context: true
                });

                // Test for unsafe origin handling
                if (!event.origin ||
                    event.origin === 'null' ||
                    event.origin === '' ||
                    event.origin.includes('data:') ||
                    event.origin.includes('javascript:')) {

                  window.postMessageResults.vulnerabilities.push({
                    type: 'unsafe_origin_handling',
                    severity: 'high',
                    origin: event.origin,
                    description: 'PostMessage listener accepts unsafe origins',
                    confirmed: true
                  });

                  window.postMessageTestResults.originBypass = true;
                }

                // Test for unsafe data handling
                if (typeof event.data === 'string') {
                  // Test for direct HTML injection
                  if (event.data.includes('<script>') || event.data.includes('<img')) {
                    window.postMessageResults.data_handlers.push({
                      type: 'html_content_received',
                      data: event.data,
                      risk: 'high'
                    });
                  }

                  // Simulate unsafe data handling patterns
                  if (event.data.includes('innerHTML') || event.data.includes('<svg')) {
                    window.postMessageTestResults.htmlInjection = true;
                  }

                  if (event.data.includes('eval(') || event.data.includes('javascript:')) {
                    window.postMessageTestResults.jsExecution = true;
                  }
                }

                // Test for object-based data handling
                if (typeof event.data === 'object' && event.data !== null) {
                  // Check for prototype pollution
                  if (event.data.__proto__ || event.data.constructor) {
                    window.postMessageTestResults.prototypePollution = true;
                    window.postMessageResults.vulnerabilities.push({
                      type: 'prototype_pollution_via_postmessage',
                      severity: 'high',
                      data: event.data,
                      description: 'PostMessage data contains prototype pollution payload',
                      confirmed: true
                    });
                  }

                  // Check for DOM manipulation payloads
                  if (event.data.innerHTML || event.data.outerHTML) {
                    window.postMessageTestResults.domManipulation = true;
                  }
                }

              } catch (e) {
                window.postMessageResults.test_results.push('postmessage_listener_error: ' + e.message);
              }
            };

            // Add our test listener
            window.addEventListener('message', window.testPostMessageListener, false);

            // Test different origin bypass scenarios
            maliciousOrigins.forEach((testOrigin, index) => {
              setTimeout(() => {
                try {
                  // Create a temporary iframe to send postMessage from different contexts
                  const testFrame = document.createElement('iframe');
                  testFrame.style.display = 'none';
                  testFrame.src = 'about:blank';
                  document.body.appendChild(testFrame);

                  testFrame.onload = () => {
                    try {
                      // Send test message with various origins
                      window.postMessage({
                        test: 'origin_bypass',
                        origin_test: testOrigin,
                        payload: injectionPayloads[index % injectionPayloads.length]
                      }, testOrigin === '*' ? '*' : window.location.origin);

                    } catch (e) {
                      window.postMessageResults.test_results.push(`origin_test_${index}_error: ${e.message}`);
                    }

                    // Clean up
                    setTimeout(() => {
                      try {
                        document.body.removeChild(testFrame);
                      } catch (e) {
                        // Ignore cleanup errors
                      }
                    }, 500);
                  };

                } catch (e) {
                  window.postMessageResults.test_results.push(`origin_bypass_test_${index}_error: ${e.message}`);
                }
              }, index * 200);
            });

            return window.postMessageResults;

      # Test injection payloads via postMessage
      - action: script
        name: test_postmessage_injection
        args:
          code: |
            window.postMessageResults.test_results.push('postmessage_injection_testing');

            // Advanced injection payloads
            const advancedPayloads = [
              {
                name: 'dom_xss_via_postmessage',
                data: {
                  action: 'updateContent',
                  content: '<img src=x onerror="window.postMessageDOMXSS=true">',
                  target: 'innerHTML'
                }
              },
              {
                name: 'javascript_execution',
                data: {
                  action: 'executeScript',
                  script: 'window.postMessageScriptExec=true',
                  method: 'eval'
                }
              },
              {
                name: 'url_manipulation',
                data: {
                  action: 'navigate',
                  url: 'javascript:window.postMessageURLManip=true'
                }
              },
              {
                name: 'storage_manipulation',
                data: {
                  action: 'setStorage',
                  key: 'malicious',
                  value: '<script>window.postMessageStorageXSS=true</script>'
                }
              },
              {
                name: 'function_call_injection',
                data: {
                  action: 'callFunction',
                  function: 'eval',
                  args: ['window.postMessageFuncCall=true']
                }
              }
            ];

            // Send injection payloads
            advancedPayloads.forEach((payload, index) => {
              setTimeout(() => {
                try {
                  window.postMessage(payload.data, window.location.origin);

                  // Check for execution after delay
                  setTimeout(() => {
                    let executed = false;
                    let executionType = '';

                    switch (payload.name) {
                      case 'dom_xss_via_postmessage':
                        executed = window.postMessageDOMXSS === true;
                        executionType = 'DOM XSS';
                        break;
                      case 'javascript_execution':
                        executed = window.postMessageScriptExec === true;
                        executionType = 'JavaScript Execution';
                        break;
                      case 'url_manipulation':
                        executed = window.postMessageURLManip === true;
                        executionType = 'URL Manipulation';
                        break;
                      case 'storage_manipulation':
                        executed = window.postMessageStorageXSS === true;
                        executionType = 'Storage XSS';
                        break;
                      case 'function_call_injection':
                        executed = window.postMessageFuncCall === true;
                        executionType = 'Function Call Injection';
                        break;
                    }

                    if (executed) {
                      window.postMessageResults.vulnerabilities.push({
                        type: 'postmessage_code_execution',
                        subtype: payload.name,
                        severity: 'critical',
                        payload: payload.data,
                        execution_type: executionType,
                        confirmed: true,
                        description: `Code execution via postMessage ${executionType}`
                      });
                    }

                  }, 300);

                } catch (e) {
                  window.postMessageResults.test_results.push(`injection_test_${index}_error: ${e.message}`);
                }
              }, index * 400);
            });

            return window.postMessageResults;

      # Test cross-frame communication vulnerabilities
      - action: script
        name: test_cross_frame_communication
        args:
          code: |
            window.postMessageResults.test_results.push('cross_frame_communication_testing');

            if (window.postMessageResults.iframes_detected.length > 0) {

              // Test communication with existing iframes
              window.postMessageResults.iframes_detected.forEach((frameInfo, index) => {
                try {
                  const frame = document.querySelectorAll('iframe, frame')[index];
                  if (frame && frame.contentWindow) {

                    // Test sending messages to iframe
                    const testPayloads = [
                      { action: 'test', data: 'cross_frame_test' },
                      { action: 'eval', code: 'window.crossFrameTest=true' },
                      { innerHTML: '<script>window.crossFrameXSS=true</script>' },
                      { __proto__: { crossFramePolluted: true } }
                    ];

                    testPayloads.forEach((payload, payloadIndex) => {
                      setTimeout(() => {
                        try {
                          frame.contentWindow.postMessage(payload, '*');

                          window.postMessageResults.data_handlers.push({
                            type: 'cross_frame_message_sent',
                            iframe_index: index,
                            payload: payload,
                            target_origin: '*',
                            timestamp: Date.now()
                          });

                        } catch (e) {
                          window.postMessageResults.test_results.push(
                            `cross_frame_send_${index}_${payloadIndex}_error: ${e.message}`
                          );
                        }
                      }, payloadIndex * 200);
                    });
                  }

                } catch (e) {
                  window.postMessageResults.test_results.push(`cross_frame_test_${index}_error: ${e.message}`);
                }
              });

              // Check iframe sandbox restrictions
              window.postMessageResults.iframes_detected.forEach((frameInfo, index) => {
                if (frameInfo.sandbox) {
                  const sandboxFlags = frameInfo.sandbox.split(' ');
                  const dangerousFlags = [
                    'allow-scripts',
                    'allow-same-origin',
                    'allow-top-navigation',
                    'allow-forms'
                  ];

                  const presentDangerousFlags = dangerousFlags.filter(flag =>
                    sandboxFlags.includes(flag)
                  );

                  if (presentDangerousFlags.length > 0) {
                    window.postMessageResults.vulnerabilities.push({
                      type: 'iframe_sandbox_bypass_risk',
                      severity: 'medium',
                      iframe_index: index,
                      dangerous_flags: presentDangerousFlags,
                      description: 'Iframe sandbox allows potentially dangerous operations',
                      confirmed: true
                    });
                  }
                } else {
                  // No sandbox at all
                  window.postMessageResults.vulnerabilities.push({
                    type: 'iframe_no_sandbox',
                    severity: 'medium',
                    iframe_index: index,
                    iframe_src: frameInfo.src,
                    description: 'Iframe lacks sandbox restrictions',
                    confirmed: true
                  });
                }
              });

            } else {
              // Create test iframe for communication testing
              try {
                const testIframe = document.createElement('iframe');
                testIframe.style.display = 'none';
                testIframe.src = 'data:text/html,<script>window.addEventListener("message", function(e) { if(e.data.eval) eval(e.data.eval); });</script>';
                document.body.appendChild(testIframe);

                testIframe.onload = () => {
                  // Test communication with dynamically created iframe
                  setTimeout(() => {
                    try {
                      testIframe.contentWindow.postMessage({
                        eval: 'window.parent.dynamicIframeTest=true'
                      }, '*');

                      setTimeout(() => {
                        if (window.dynamicIframeTest === true) {
                          window.postMessageResults.vulnerabilities.push({
                            type: 'dynamic_iframe_code_execution',
                            severity: 'high',
                            description: 'Code execution via dynamically created iframe postMessage',
                            confirmed: true
                          });
                        }

                        // Clean up
                        document.body.removeChild(testIframe);
                      }, 500);

                    } catch (e) {
                      window.postMessageResults.test_results.push('dynamic_iframe_test_error: ' + e.message);
                    }
                  }, 500);
                };

              } catch (e) {
                window.postMessageResults.test_results.push('dynamic_iframe_creation_error: ' + e.message);
              }
            }

            return window.postMessageResults;

      # Test postMessage listener analysis
      - action: script
        name: analyze_postmessage_listeners
        args:
          code: |
            window.postMessageResults.test_results.push('postmessage_listener_analysis');

            // Analyze detected listeners for security issues
            window.postMessageResults.listeners.forEach((listener, index) => {
              try {
                const listenerCode = listener.listener || listener.match || '';

                // Check for unsafe patterns in listener code
                const unsafePatterns = [
                  {
                    pattern: /event\.origin\s*[!=]==?\s*['"]?\*['"]?/gi,
                    issue: 'wildcard_origin_check',
                    severity: 'high',
                    description: 'Listener accepts messages from any origin'
                  },
                  {
                    pattern: /event\.data.*innerHTML/gi,
                    issue: 'unsafe_html_injection',
                    severity: 'critical',
                    description: 'Direct innerHTML assignment from postMessage data'
                  },
                  {
                    pattern: /eval\s*\(\s*event\.data/gi,
                    issue: 'eval_postmessage_data',
                    severity: 'critical',
                    description: 'eval() called with postMessage data'
                  },
                  {
                    pattern: /Function\s*\(\s*event\.data/gi,
                    issue: 'function_constructor_postmessage',
                    severity: 'critical',
                    description: 'Function constructor called with postMessage data'
                  },
                  {
                    pattern: /document\.write\s*\(\s*event\.data/gi,
                    issue: 'document_write_postmessage',
                    severity: 'high',
                    description: 'document.write() called with postMessage data'
                  },
                  {
                    pattern: /location\s*=\s*event\.data/gi,
                    issue: 'location_assignment_postmessage',
                    severity: 'high',
                    description: 'Location assignment from postMessage data'
                  },
                  {
                    pattern: /\.src\s*=\s*event\.data/gi,
                    issue: 'src_assignment_postmessage',
                    severity: 'medium',
                    description: 'src attribute assignment from postMessage data'
                  }
                ];

                unsafePatterns.forEach(patternObj => {
                  const matches = listenerCode.match(patternObj.pattern);
                  if (matches) {
                    window.postMessageResults.vulnerabilities.push({
                      type: 'unsafe_postmessage_listener',
                      subtype: patternObj.issue,
                      severity: patternObj.severity,
                      listener_index: index,
                      listener_type: listener.type,
                      description: patternObj.description,
                      matches: matches,
                      confirmed: true,
                      code_snippet: listenerCode.substring(0, 200)
                    });
                  }
                });

                // Check for missing origin validation
                if (!listenerCode.includes('event.origin') &&
                    !listenerCode.includes('e.origin') &&
                    !listenerCode.includes('message.origin')) {
                  window.postMessageResults.vulnerabilities.push({
                    type: 'missing_origin_validation',
                    severity: 'medium',
                    listener_index: index,
                    listener_type: listener.type,
                    description: 'PostMessage listener lacks origin validation',
                    confirmed: true,
                    code_snippet: listenerCode.substring(0, 200)
                  });
                }

              } catch (e) {
                window.postMessageResults.test_results.push(`listener_analysis_${index}_error: ${e.message}`);
              }
            });

            return window.postMessageResults;

      # Final postMessage vulnerability assessment
      - action: script
        name: final_postmessage_assessment
        args:
          code: |
            // Remove test listener
            try {
              window.removeEventListener('message', window.testPostMessageListener, false);
            } catch (e) {
              // Ignore cleanup errors
            }

            // Calculate comprehensive postMessage vulnerability risk score
            let riskScore = 0;
            const confirmedVulns = window.postMessageResults.vulnerabilities.filter(v => v.confirmed);

            confirmedVulns.forEach(vuln => {
              switch (vuln.severity) {
                case 'critical': riskScore += 40; break;
                case 'high': riskScore += 25; break;
                case 'medium': riskScore += 15; break;
                case 'low': riskScore += 5; break;
              }
            });

            // Additional risk factors
            const listenersCount = window.postMessageResults.listeners.length;
            const iframesCount = window.postMessageResults.iframes_detected.length;

            riskScore += listenersCount * 5;
            riskScore += iframesCount * 3;

            window.postMessageResults.risk_assessment = {
              total_vulnerabilities: confirmedVulns.length,
              listeners_analyzed: listenersCount,
              iframes_detected: iframesCount,
              cross_frame_communications: window.postMessageResults.data_handlers.length,
              risk_score: Math.min(riskScore, 100),
              risk_level: riskScore > 70 ? 'Critical' :
                         riskScore > 50 ? 'High' :
                         riskScore > 30 ? 'Medium' : 'Low',
              test_coverage: window.postMessageResults.test_results.length,
              recommendations: []
            };

            // Generate specific recommendations
            if (confirmedVulns.some(v => v.subtype === 'wildcard_origin_check')) {
              window.postMessageResults.risk_assessment.recommendations.push(
                'Implement strict origin validation in postMessage listeners',
                'Use allowlist of trusted origins instead of wildcard (*)'
              );
            }

            if (confirmedVulns.some(v => v.subtype === 'unsafe_html_injection')) {
              window.postMessageResults.risk_assessment.recommendations.push(
                'Sanitize all postMessage data before DOM insertion',
                'Use textContent instead of innerHTML for untrusted data'
              );
            }

            if (confirmedVulns.some(v => v.subtype === 'eval_postmessage_data')) {
              window.postMessageResults.risk_assessment.recommendations.push(
                'Never use eval() with postMessage data',
                'Implement secure message parsing and validation'
              );
            }

            if (confirmedVulns.some(v => v.type === 'iframe_no_sandbox')) {
              window.postMessageResults.risk_assessment.recommendations.push(
                'Implement iframe sandbox restrictions',
                'Use minimal required sandbox permissions'
              );
            }

            if (confirmedVulns.some(v => v.type === 'missing_origin_validation')) {
              window.postMessageResults.risk_assessment.recommendations.push(
                'Add origin validation to all postMessage listeners',
                'Implement message type validation and allowlisting'
              );
            }

            if (confirmedVulns.length > 0) {
              window.postMessageResults.risk_assessment.recommendations.push(
                'Regular security review of cross-frame communication',
                'Implement Content Security Policy frame-ancestors directive',
                'Consider using more secure alternatives to postMessage when possible'
              );
            }

            window.postMessageResults.summary = {
              scan_completed: true,
              timestamp: new Date().toISOString(),
              postmessage_vulnerabilities_found: confirmedVulns.length > 0,
              critical_vulnerabilities: confirmedVulns.filter(v => v.severity === 'critical').length,
              listeners_with_issues: confirmedVulns.filter(v => v.type === 'unsafe_postmessage_listener').length,
              cross_frame_security_assessed: true
            };

            return window.postMessageResults;

    extractors:
      - type: regex
        name: postmessage_vuln_summary
        part: body
        regex:
          - '"scan_completed":\s*true'

      - type: regex
        name: critical_postmessage_vulns
        part: body
        regex:
          - '"critical_vulnerabilities":\s*[1-9]'

    matchers:
      - type: regex
        name: postmessage_vulnerabilities_detected
        regex:
          - '"postmessage_vulnerabilities_found":\s*true'

      - type: regex
        name: critical_postmessage_vulnerabilities
        regex:
          - '"severity":\s*"critical"'

# Headless template for comprehensive postMessage vulnerability detection