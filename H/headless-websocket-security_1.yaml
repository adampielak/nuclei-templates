id: headless-websocket-security

info:
  name: WebSocket Security Analyzer
  author: geeknik
  severity: medium
  description: |
    Advanced WebSocket security analysis using Headless Protocol for comprehensive
    WebSocket connection testing. This template performs WebSocket handshake analysis,
    origin validation testing, message injection assessment, and protocol security
    evaluation to identify WebSocket vulnerabilities including origin bypass,
    message injection, and connection hijacking while maintaining defensive
    research principles.
  reference:
    - https://owasp.org/www-community/attacks/WebSocket_security_vulnerabilities
    - https://portswigger.net/web-security/websockets
    - https://tools.ietf.org/html/rfc6455
  tags: websocket,real-time,headless,origin-validation,defensive

headless:
  - steps:
      # Navigate to target page
      - action: navigate
        args:
          url: "{{BaseURL}}"

      # Wait for page to fully load
      - action: waitload

      # Initialize WebSocket security testing framework
      - action: script
        name: initialize_websocket_testing
        args:
          code: |
            function() {
              window.websocketResults = {
                websocket_connections: [],
                vulnerabilities: [],
                test_results: [],
                origin_tests: [],
                message_tests: [],
                handshake_analysis: [],
                risk_assessment: {}
              };

              // Store original WebSocket constructor
              var OriginalWebSocket = window.WebSocket;
              window.websocketResults.original_websocket = OriginalWebSocket;

              // Hook WebSocket constructor to detect connections
              window.WebSocket = function(url, protocols) {
                window.websocketResults.test_results.push('websocket_connection_detected');

                var wsConnection = {
                  url: url,
                  protocols: protocols,
                  origin: window.location.origin,
                  timestamp: Date.now(),
                  events: []
                };

                window.websocketResults.websocket_connections.push(wsConnection);

                // Create actual WebSocket connection
                var ws = new OriginalWebSocket(url, protocols);

                // Hook WebSocket events
                var originalOnOpen = ws.onopen;
                var originalOnMessage = ws.onmessage;
                var originalOnError = ws.onerror;
                var originalOnClose = ws.onclose;
                var originalSend = ws.send;

                ws.onopen = function(event) {
                  wsConnection.events.push({
                    type: 'open',
                    timestamp: Date.now(),
                    readyState: ws.readyState
                  });

                  // Test origin validation
                  window.websocketResults.test_results.push('websocket_connection_opened');

                  if (originalOnOpen) {
                    originalOnOpen.call(this, event);
                  }
                };

                ws.onmessage = function(event) {
                  wsConnection.events.push({
                    type: 'message',
                    data: event.data,
                    timestamp: Date.now()
                  });

                  // Analyze message content for security issues
                  if (typeof event.data === 'string') {
                    // Check for reflected content
                    if (event.data.includes('<script>') || event.data.includes('javascript:')) {
                      window.websocketResults.vulnerabilities.push({
                        type: 'websocket_xss_reflection',
                        severity: 'high',
                        message_data: event.data,
                        websocket_url: url,
                        description: 'WebSocket message contains potential XSS content',
                        confirmed: true
                      });
                    }

                    // Check for sensitive data exposure
                    var sensitivePatterns = [
                      /password/gi,
                      /token/gi,
                      /api[_-]?key/gi,
                      /secret/gi,
                      /private[_-]?key/gi
                    ];

                    sensitivePatterns.forEach(function(pattern) {
                      if (pattern.test(event.data)) {
                        window.websocketResults.vulnerabilities.push({
                          type: 'websocket_sensitive_data_exposure',
                          severity: 'medium',
                          pattern: pattern.toString(),
                          websocket_url: url,
                          description: 'WebSocket message may contain sensitive data',
                          confirmed: true
                        });
                      }
                    });
                  }

                  if (originalOnMessage) {
                    originalOnMessage.call(this, event);
                  }
                };

                ws.onerror = function(event) {
                  wsConnection.events.push({
                    type: 'error',
                    timestamp: Date.now(),
                    error: event.error || 'WebSocket error'
                  });

                  if (originalOnError) {
                    originalOnError.call(this, event);
                  }
                };

                ws.onclose = function(event) {
                  wsConnection.events.push({
                    type: 'close',
                    code: event.code,
                    reason: event.reason,
                    timestamp: Date.now()
                  });

                  if (originalOnClose) {
                    originalOnClose.call(this, event);
                  }
                };

                // Hook send method to analyze outgoing messages
                ws.send = function(data) {
                  wsConnection.events.push({
                    type: 'send',
                    data: data,
                    timestamp: Date.now()
                  });

                  // Analyze outgoing messages for security issues
                  if (typeof data === 'string') {
                    try {
                      var parsedData = JSON.parse(data);

                      // Check for potential injection attempts
                      if (parsedData.eval || parsedData.script || parsedData.innerHTML) {
                        window.websocketResults.vulnerabilities.push({
                          type: 'websocket_injection_attempt',
                          severity: 'high',
                          message_data: data,
                          websocket_url: url,
                          description: 'Outgoing WebSocket message contains potential injection payload',
                          confirmed: true
                        });
                      }
                    } catch (e) {
                      // Not JSON, continue analysis
                    }
                  }

                  return originalSend.call(this, data);
                };

                return ws;
              };

              // Copy static methods and properties
              for (var prop in OriginalWebSocket) {
                if (OriginalWebSocket.hasOwnProperty(prop)) {
                  window.WebSocket[prop] = OriginalWebSocket[prop];
                }
              }

              // Scan page for existing WebSocket usage
              var scripts = Array.from(document.scripts);
              scripts.forEach(function(script, index) {
                if (script.textContent) {
                  var content = script.textContent;

                  // Look for WebSocket patterns
                  var wsPatterns = [
                    /new\s+WebSocket\s*\(/gi,
                    /WebSocket\s*\(/gi,
                    /ws:\/\/[^\s"')]+/gi,
                    /wss:\/\/[^\s"')]+/gi
                  ];

                  wsPatterns.forEach(function(pattern, patternIndex) {
                    var matches = content.match(pattern);
                    if (matches) {
                      matches.forEach(function(match) {
                        window.websocketResults.websocket_connections.push({
                          type: 'script_analysis',
                          script_index: index,
                          pattern_index: patternIndex,
                          match: match,
                          context: content.substring(
                            Math.max(0, content.indexOf(match) - 50),
                            Math.min(content.length, content.indexOf(match) + 100)
                          )
                        });
                      });
                    }
                  });
                }
              });

              return window.websocketResults;
            }

      # Test WebSocket origin validation
      - action: script
        name: test_websocket_origin_validation
        args:
          code: |
            (function() {
              window.websocketResults.test_results.push('websocket_origin_validation_testing');

              try {
                // Test various WebSocket URLs for origin validation
                var testUrls = [];

                // Extract WebSocket URLs from existing connections or common patterns
                var currentProtocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';
                var currentHost = window.location.host;

                // Common WebSocket endpoints
                var commonEndpoints = [
                  '/ws',
                  '/websocket',
                  '/socket',
                  '/api/ws',
                  '/live',
                  '/chat',
                  '/notifications',
                  '/updates'
                ];

                commonEndpoints.forEach(function(endpoint) {
                  testUrls.push(currentProtocol + '//' + currentHost + endpoint);
                });

                // Test origin bypass techniques
                var maliciousOrigins = [
                  'null',
                  '',
                  'evil.com',
                  currentHost + '.evil.com',
                  'evil.' + currentHost,
                  'data:',
                  'javascript:'
                ];

                var originalOrigin = window.location.origin;

                testUrls.forEach(function(wsUrl, urlIndex) {
                  maliciousOrigins.forEach(function(testOrigin, originIndex) {
                    setTimeout(function() {
                      try {
                        // Temporarily modify the origin (if possible)
                        var testConnection = {
                          url: wsUrl,
                          test_origin: testOrigin,
                          timestamp: Date.now(),
                          result: null
                        };

                        // Attempt WebSocket connection
                        var ws = new window.websocketResults.original_websocket(wsUrl);

                        ws.onopen = function() {
                          testConnection.result = 'connection_successful';
                          window.websocketResults.vulnerabilities.push({
                            type: 'websocket_origin_bypass',
                            severity: 'high',
                            websocket_url: wsUrl,
                            test_origin: testOrigin,
                            description: 'WebSocket connection succeeded with suspicious origin',
                            confirmed: true
                          });
                          ws.close();
                        };

                        ws.onerror = function(error) {
                          testConnection.result = 'connection_failed';
                          // This is expected for security-conscious implementations
                        };

                        ws.onclose = function() {
                          testConnection.result = 'connection_closed';
                        };

                        window.websocketResults.origin_tests.push(testConnection);

                        // Close connection after timeout
                        setTimeout(function() {
                          if (ws.readyState === WebSocket.CONNECTING || ws.readyState === WebSocket.OPEN) {
                            ws.close();
                          }
                        }, 2000);

                      } catch (e) {
                        window.websocketResults.test_results.push('origin_test_' + urlIndex + '_' + originIndex + '_error: ' + e.message);
                      }
                    }, (urlIndex * maliciousOrigins.length + originIndex) * 300);
                  });
                });

              } catch (e) {
                window.websocketResults.test_results.push('websocket_origin_test_error: ' + e.message);
              }

              return window.websocketResults;
            })()

      # Test WebSocket message injection
      - action: script
        name: test_websocket_message_injection
        args:
          code: |
            (function() {
              window.websocketResults.test_results.push('websocket_message_injection_testing');

              try {
                // Test message injection payloads
                var injectionPayloads = [
                  {
                    name: 'xss_injection',
                    payload: '{"message": "<script>window.wsXSSTest=true</script>"}',
                    expected_result: 'xss_execution'
                  },
                  {
                    name: 'html_injection',
                    payload: '{"content": "<img src=x onerror=window.wsHTMLTest=true>"}',
                    expected_result: 'html_execution'
                  },
                  {
                    name: 'javascript_execution',
                    payload: '{"eval": "window.wsJSTest=true"}',
                    expected_result: 'js_execution'
                  },
                  {
                    name: 'command_injection',
                    payload: '{"cmd": "alert(\'WebSocket injection\')"}',
                    expected_result: 'command_execution'
                  },
                  {
                    name: 'prototype_pollution',
                    payload: '{"__proto__": {"wsPolluted": true}}',
                    expected_result: 'prototype_pollution'
                  },
                  {
                    name: 'path_traversal',
                    payload: '{"file": "../../../etc/passwd"}',
                    expected_result: 'path_traversal'
                  }
                ];

                // Initialize test result tracking
                window.wsInjectionResults = {
                  xssExecution: false,
                  htmlExecution: false,
                  jsExecution: false,
                  commandExecution: false,
                  prototypePollution: false
                };

                // Test each WebSocket connection found
                if (window.websocketResults.websocket_connections.length > 0) {
                  window.websocketResults.websocket_connections.forEach(function(wsConn, connIndex) {
                    if (wsConn.url && !wsConn.type) { // Real WebSocket connection
                      injectionPayloads.forEach(function(payload, payloadIndex) {
                        setTimeout(function() {
                          try {
                            // Create test WebSocket connection
                            var testWs = new window.websocketResults.original_websocket(wsConn.url);

                            testWs.onopen = function() {
                              // Send injection payload
                              testWs.send(payload.payload);

                              window.websocketResults.message_tests.push({
                                connection_index: connIndex,
                                payload_name: payload.name,
                                payload_data: payload.payload,
                                timestamp: Date.now(),
                                status: 'sent'
                              });

                              // Close connection after sending
                              setTimeout(function() {
                                testWs.close();
                              }, 1000);
                            };

                            testWs.onmessage = function(event) {
                              // Analyze response for injection success
                              var responseData = event.data;

                              if (typeof responseData === 'string') {
                                // Check for reflected payload
                                if (responseData.includes(payload.payload) ||
                                    responseData.includes('<script>') ||
                                    responseData.includes('onerror=')) {

                                  window.websocketResults.vulnerabilities.push({
                                    type: 'websocket_message_injection',
                                    subtype: payload.name,
                                    severity: 'high',
                                    payload_sent: payload.payload,
                                    response_received: responseData,
                                    websocket_url: wsConn.url,
                                    description: 'WebSocket message injection successful',
                                    confirmed: true
                                  });
                                }

                                // Check for specific injection indicators
                                if (payload.name === 'xss_injection' && responseData.includes('<script>')) {
                                  window.wsInjectionResults.xssExecution = true;
                                }
                                if (payload.name === 'html_injection' && responseData.includes('<img')) {
                                  window.wsInjectionResults.htmlExecution = true;
                                }
                                if (payload.name === 'javascript_execution' && responseData.includes('eval')) {
                                  window.wsInjectionResults.jsExecution = true;
                                }
                              }

                              // Check for prototype pollution
                              if (payload.name === 'prototype_pollution') {
                                if (({}).wsPolluted === true) {
                                  window.websocketResults.vulnerabilities.push({
                                    type: 'websocket_prototype_pollution',
                                    severity: 'high',
                                    payload_sent: payload.payload,
                                    websocket_url: wsConn.url,
                                    description: 'WebSocket message caused prototype pollution',
                                    confirmed: true
                                  });
                                  window.wsInjectionResults.prototypePollution = true;
                                }
                              }
                            };

                            testWs.onerror = function(error) {
                              window.websocketResults.message_tests.push({
                                connection_index: connIndex,
                                payload_name: payload.name,
                                error: error.message || 'WebSocket error',
                                timestamp: Date.now(),
                                status: 'error'
                              });
                            };

                          } catch (e) {
                            window.websocketResults.test_results.push('message_injection_' + connIndex + '_' + payloadIndex + '_error: ' + e.message);
                          }
                        }, (connIndex * injectionPayloads.length + payloadIndex) * 500);
                      });
                    }
                  });
                }

                // Test direct WebSocket creation with injection payloads
                var commonWsUrls = [
                  'ws://localhost:8080/ws',
                  'wss://' + window.location.host + '/ws',
                  'wss://' + window.location.host + '/websocket'
                ];

                commonWsUrls.forEach(function(wsUrl, urlIndex) {
                  setTimeout(function() {
                    try {
                      var directTestWs = new window.websocketResults.original_websocket(wsUrl);

                      directTestWs.onopen = function() {
                        // Send a basic injection test
                        var testPayload = '{"test": "<script>window.wsDirectTest=true</script>"}';
                        directTestWs.send(testPayload);

                        setTimeout(function() {
                          directTestWs.close();
                        }, 1000);
                      };

                      directTestWs.onmessage = function(event) {
                        if (event.data && event.data.includes('<script>')) {
                          window.websocketResults.vulnerabilities.push({
                            type: 'websocket_direct_injection',
                            severity: 'high',
                            websocket_url: wsUrl,
                            response_data: event.data,
                            description: 'Direct WebSocket injection test successful',
                            confirmed: true
                          });
                        }
                      };

                      directTestWs.onerror = function() {
                        // Expected for non-existent endpoints
                      };

                    } catch (e) {
                      window.websocketResults.test_results.push('direct_ws_test_' + urlIndex + '_error: ' + e.message);
                    }
                  }, urlIndex * 1000 + 5000); // Delay to allow other tests to complete
                });

              } catch (e) {
                window.websocketResults.test_results.push('websocket_message_injection_error: ' + e.message);
              }

              return window.websocketResults;
            })()

      # Test WebSocket handshake security
      - action: script
        name: test_websocket_handshake_security
        args:
          code: |
            (function() {
              window.websocketResults.test_results.push('websocket_handshake_security_testing');

              try {
                // Analyze WebSocket handshake security
                var handshakeTests = [
                  {
                    name: 'insecure_websocket_url',
                    test: function() {
                      // Check if any WebSocket connections use ws:// instead of wss://
                      var insecureConnections = window.websocketResults.websocket_connections.filter(function(conn) {
                        return conn.url && conn.url.startsWith('ws://');
                      });

                      return insecureConnections.length > 0 ? insecureConnections : null;
                    }
                  },
                  {
                    name: 'mixed_content_websocket',
                    test: function() {
                      // Check for mixed content (HTTPS page with ws:// WebSocket)
                      if (window.location.protocol === 'https:') {
                        var mixedContentConnections = window.websocketResults.websocket_connections.filter(function(conn) {
                          return conn.url && conn.url.startsWith('ws://');
                        });
                        return mixedContentConnections.length > 0 ? mixedContentConnections : null;
                      }
                      return null;
                    }
                  },
                  {
                    name: 'websocket_without_origin_check',
                    test: function() {
                      // Check if WebSocket connections accept any origin
                      return window.websocketResults.origin_tests.filter(function(test) {
                        return test.result === 'connection_successful' &&
                               (test.test_origin === 'evil.com' || test.test_origin === 'null');
                      });
                    }
                  }
                ];

                handshakeTests.forEach(function(test, index) {
                  try {
                    var result = test.test();
                    if (result && result.length > 0) {
                      var severity = 'medium';
                      if (test.name === 'mixed_content_websocket' || test.name === 'websocket_without_origin_check') {
                        severity = 'high';
                      }

                      window.websocketResults.vulnerabilities.push({
                        type: 'websocket_handshake_security',
                        subtype: test.name,
                        severity: severity,
                        details: result,
                        description: 'WebSocket handshake security issue detected',
                        confirmed: true
                      });
                    }

                    window.websocketResults.handshake_analysis.push({
                      test_name: test.name,
                      result: result ? 'vulnerable' : 'secure',
                      details: result || 'No issues found',
                      timestamp: Date.now()
                    });

                  } catch (e) {
                    window.websocketResults.test_results.push('handshake_test_' + index + '_error: ' + e.message);
                  }
                });

                // Test for WebSocket over HTTP (should be blocked by browsers)
                if (window.location.protocol === 'https:') {
                  try {
                    var httpWsUrl = 'ws://' + window.location.host + '/test';
                    var httpWs = new window.websocketResults.original_websocket(httpWsUrl);

                    httpWs.onopen = function() {
                      window.websocketResults.vulnerabilities.push({
                        type: 'websocket_mixed_content_allowed',
                        severity: 'high',
                        websocket_url: httpWsUrl,
                        description: 'Browser allowed WebSocket connection over HTTP from HTTPS page',
                        confirmed: true
                      });
                      httpWs.close();
                    };

                    httpWs.onerror = function() {
                      // This is expected and secure behavior
                      window.websocketResults.handshake_analysis.push({
                        test_name: 'mixed_content_blocked',
                        result: 'secure',
                        details: 'Browser correctly blocked mixed content WebSocket',
                        timestamp: Date.now()
                      });
                    };

                  } catch (e) {
                    // Expected security error
                    window.websocketResults.handshake_analysis.push({
                      test_name: 'mixed_content_security_error',
                      result: 'secure',
                      details: 'Security error prevented mixed content WebSocket: ' + e.message,
                      timestamp: Date.now()
                    });
                  }
                }

              } catch (e) {
                window.websocketResults.test_results.push('websocket_handshake_security_error: ' + e.message);
              }

              return window.websocketResults;
            })()

      # Final WebSocket security assessment
      - action: script
        name: final_websocket_assessment
        args:
          code: |
            (function() {
              // Restore original WebSocket constructor
              try {
                window.WebSocket = window.websocketResults.original_websocket;
              } catch (e) {
                // Ignore restoration errors
              }

              // Calculate comprehensive WebSocket security risk score
              var riskScore = 0;
              var confirmedVulns = window.websocketResults.vulnerabilities.filter(function(v) {
                return v.confirmed;
              });

              confirmedVulns.forEach(function(vuln) {
                switch (vuln.severity) {
                  case 'critical': riskScore += 40; break;
                  case 'high': riskScore += 25; break;
                  case 'medium': riskScore += 15; break;
                  case 'low': riskScore += 5; break;
                }
              });

              // Additional risk factors
              var websocketConnectionsCount = window.websocketResults.websocket_connections.length;
              var failedOriginTests = window.websocketResults.origin_tests.filter(function(test) {
                return test.result === 'connection_successful';
              }).length;

              riskScore += websocketConnectionsCount * 2;
              riskScore += failedOriginTests * 10;

              window.websocketResults.risk_assessment = {
                total_vulnerabilities: confirmedVulns.length,
                websocket_connections_detected: websocketConnectionsCount,
                origin_validation_failures: failedOriginTests,
                message_injection_attempts: window.websocketResults.message_tests.length,
                handshake_security_issues: window.websocketResults.handshake_analysis.filter(function(h) {
                  return h.result === 'vulnerable';
                }).length,
                risk_score: Math.min(riskScore, 100),
                risk_level: riskScore > 70 ? 'Critical' :
                           riskScore > 50 ? 'High' :
                           riskScore > 30 ? 'Medium' : 'Low',
                test_coverage: window.websocketResults.test_results.length,
                recommendations: []
              };

              // Generate specific recommendations
              if (confirmedVulns.some(function(v) { return v.type.includes('origin_bypass'); })) {
                window.websocketResults.risk_assessment.recommendations.push(
                  'Implement strict origin validation for WebSocket connections',
                  'Use allowlist of trusted origins for WebSocket handshakes'
                );
              }

              if (confirmedVulns.some(function(v) { return v.type.includes('message_injection'); })) {
                window.websocketResults.risk_assessment.recommendations.push(
                  'Validate and sanitize all WebSocket message content',
                  'Implement message type validation and rate limiting'
                );
              }

              if (confirmedVulns.some(function(v) { return v.subtype === 'insecure_websocket_url'; })) {
                window.websocketResults.risk_assessment.recommendations.push(
                  'Use WSS (WebSocket Secure) instead of WS for all connections',
                  'Implement HTTPS-only WebSocket policy'
                );
              }

              if (confirmedVulns.some(function(v) { return v.type.includes('xss'); })) {
                window.websocketResults.risk_assessment.recommendations.push(
                  'Escape HTML content in WebSocket messages',
                  'Implement Content Security Policy for WebSocket origins'
                );
              }

              if (confirmedVulns.some(function(v) { return v.type.includes('prototype_pollution'); })) {
                window.websocketResults.risk_assessment.recommendations.push(
                  'Validate WebSocket message structure to prevent prototype pollution',
                  'Use JSON schema validation for incoming messages'
                );
              }

              if (confirmedVulns.length > 0) {
                window.websocketResults.risk_assessment.recommendations.push(
                  'Regular security testing of WebSocket implementations',
                  'Implement WebSocket connection monitoring and logging',
                  'Use authentication and authorization for WebSocket connections'
                );
              }

              window.websocketResults.summary = {
                scan_completed: true,
                timestamp: new Date().toISOString(),
                websocket_vulnerabilities_found: confirmedVulns.length > 0,
                secure_connections: confirmedVulns.filter(function(v) { return v.subtype !== 'insecure_websocket_url'; }).length === 0,
                origin_validation_implemented: failedOriginTests === 0,
                message_security_adequate: confirmedVulns.filter(function(v) { return v.type.includes('injection'); }).length === 0,
                comprehensive_testing_completed: true
              };

              return window.websocketResults;
            })()

    extractors:
      - type: regex
        name: websocket_security_summary
        part: body
        regex:
          - '"scan_completed":\s*true'

      - type: regex
        name: websocket_vulnerabilities_found
        part: body
        regex:
          - '"websocket_vulnerabilities_found":\s*true'

    matchers:
      - type: regex
        name: websocket_security_issues_detected
        regex:
          - '"websocket_vulnerabilities_found":\s*true'

      - type: regex
        name: high_risk_websocket_vulnerabilities
        regex:
          - '"risk_level":\s*"(Critical|High)"'

# Headless template for comprehensive WebSocket security analysis